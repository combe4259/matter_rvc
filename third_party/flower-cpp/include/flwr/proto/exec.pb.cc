// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/exec.proto

#include "flwr/proto/exec.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace flwr {
namespace proto {
PROTOBUF_CONSTEXPR StartRunRequest_OverrideConfigEntry_DoNotUse::StartRunRequest_OverrideConfigEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct StartRunRequest_OverrideConfigEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartRunRequest_OverrideConfigEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartRunRequest_OverrideConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StartRunRequest_OverrideConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartRunRequest_OverrideConfigEntry_DoNotUseDefaultTypeInternal _StartRunRequest_OverrideConfigEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StartRunRequest_FederationConfigEntry_DoNotUse::StartRunRequest_FederationConfigEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct StartRunRequest_FederationConfigEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartRunRequest_FederationConfigEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartRunRequest_FederationConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StartRunRequest_FederationConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartRunRequest_FederationConfigEntry_DoNotUseDefaultTypeInternal _StartRunRequest_FederationConfigEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StartRunRequest::StartRunRequest(
    ::_pbi::ConstantInitialized)
  : override_config_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , federation_config_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , fab_(nullptr){}
struct StartRunRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartRunRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartRunRequestDefaultTypeInternal() {}
  union {
    StartRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartRunRequestDefaultTypeInternal _StartRunRequest_default_instance_;
PROTOBUF_CONSTEXPR StartRunResponse::StartRunResponse(
    ::_pbi::ConstantInitialized)
  : run_id_(uint64_t{0u}){}
struct StartRunResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartRunResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartRunResponseDefaultTypeInternal() {}
  union {
    StartRunResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartRunResponseDefaultTypeInternal _StartRunResponse_default_instance_;
PROTOBUF_CONSTEXPR StreamLogsRequest::StreamLogsRequest(
    ::_pbi::ConstantInitialized)
  : run_id_(uint64_t{0u}){}
struct StreamLogsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamLogsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamLogsRequestDefaultTypeInternal() {}
  union {
    StreamLogsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamLogsRequestDefaultTypeInternal _StreamLogsRequest_default_instance_;
PROTOBUF_CONSTEXPR StreamLogsResponse::StreamLogsResponse(
    ::_pbi::ConstantInitialized)
  : log_output_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct StreamLogsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamLogsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamLogsResponseDefaultTypeInternal() {}
  union {
    StreamLogsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamLogsResponseDefaultTypeInternal _StreamLogsResponse_default_instance_;
}  // namespace proto
}  // namespace flwr
static ::_pb::Metadata file_level_metadata_flwr_2fproto_2fexec_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_flwr_2fproto_2fexec_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_flwr_2fproto_2fexec_2eproto = nullptr;

const uint32_t TableStruct_flwr_2fproto_2fexec_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest_OverrideConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest_OverrideConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest_OverrideConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest_OverrideConfigEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest_FederationConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest_FederationConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest_FederationConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest_FederationConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest, fab_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest, override_config_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunRequest, federation_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StartRunResponse, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StreamLogsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StreamLogsRequest, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StreamLogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::StreamLogsResponse, log_output_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::flwr::proto::StartRunRequest_OverrideConfigEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::flwr::proto::StartRunRequest_FederationConfigEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::flwr::proto::StartRunRequest)},
  { 29, -1, -1, sizeof(::flwr::proto::StartRunResponse)},
  { 36, -1, -1, sizeof(::flwr::proto::StreamLogsRequest)},
  { 43, -1, -1, sizeof(::flwr::proto::StreamLogsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::flwr::proto::_StartRunRequest_OverrideConfigEntry_DoNotUse_default_instance_._instance,
  &::flwr::proto::_StartRunRequest_FederationConfigEntry_DoNotUse_default_instance_._instance,
  &::flwr::proto::_StartRunRequest_default_instance_._instance,
  &::flwr::proto::_StartRunResponse_default_instance_._instance,
  &::flwr::proto::_StreamLogsRequest_default_instance_._instance,
  &::flwr::proto::_StreamLogsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_flwr_2fproto_2fexec_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025flwr/proto/exec.proto\022\nflwr.proto\032\024flw"
  "r/proto/fab.proto\032\032flwr/proto/transport."
  "proto\"\337\002\n\017StartRunRequest\022\034\n\003fab\030\001 \001(\0132\017"
  ".flwr.proto.Fab\022H\n\017override_config\030\002 \003(\013"
  "2/.flwr.proto.StartRunRequest.OverrideCo"
  "nfigEntry\022L\n\021federation_config\030\003 \003(\01321.f"
  "lwr.proto.StartRunRequest.FederationConf"
  "igEntry\032I\n\023OverrideConfigEntry\022\013\n\003key\030\001 "
  "\001(\t\022!\n\005value\030\002 \001(\0132\022.flwr.proto.Scalar:\002"
  "8\001\032K\n\025FederationConfigEntry\022\013\n\003key\030\001 \001(\t"
  "\022!\n\005value\030\002 \001(\0132\022.flwr.proto.Scalar:\0028\001\""
  "\"\n\020StartRunResponse\022\016\n\006run_id\030\001 \001(\004\"#\n\021S"
  "treamLogsRequest\022\016\n\006run_id\030\001 \001(\004\"(\n\022Stre"
  "amLogsResponse\022\022\n\nlog_output\030\001 \001(\t2\240\001\n\004E"
  "xec\022G\n\010StartRun\022\033.flwr.proto.StartRunReq"
  "uest\032\034.flwr.proto.StartRunResponse\"\000\022O\n\n"
  "StreamLogs\022\035.flwr.proto.StreamLogsReques"
  "t\032\036.flwr.proto.StreamLogsResponse\"\0000\001b\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_flwr_2fproto_2fexec_2eproto_deps[2] = {
  &::descriptor_table_flwr_2fproto_2ffab_2eproto,
  &::descriptor_table_flwr_2fproto_2ftransport_2eproto,
};
static ::_pbi::once_flag descriptor_table_flwr_2fproto_2fexec_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_flwr_2fproto_2fexec_2eproto = {
    false, false, 725, descriptor_table_protodef_flwr_2fproto_2fexec_2eproto,
    "flwr/proto/exec.proto",
    &descriptor_table_flwr_2fproto_2fexec_2eproto_once, descriptor_table_flwr_2fproto_2fexec_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_flwr_2fproto_2fexec_2eproto::offsets,
    file_level_metadata_flwr_2fproto_2fexec_2eproto, file_level_enum_descriptors_flwr_2fproto_2fexec_2eproto,
    file_level_service_descriptors_flwr_2fproto_2fexec_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_flwr_2fproto_2fexec_2eproto_getter() {
  return &descriptor_table_flwr_2fproto_2fexec_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_flwr_2fproto_2fexec_2eproto(&descriptor_table_flwr_2fproto_2fexec_2eproto);
namespace flwr {
namespace proto {

// ===================================================================

StartRunRequest_OverrideConfigEntry_DoNotUse::StartRunRequest_OverrideConfigEntry_DoNotUse() {}
StartRunRequest_OverrideConfigEntry_DoNotUse::StartRunRequest_OverrideConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StartRunRequest_OverrideConfigEntry_DoNotUse::MergeFrom(const StartRunRequest_OverrideConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StartRunRequest_OverrideConfigEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fexec_2eproto_getter, &descriptor_table_flwr_2fproto_2fexec_2eproto_once,
      file_level_metadata_flwr_2fproto_2fexec_2eproto[0]);
}

// ===================================================================

StartRunRequest_FederationConfigEntry_DoNotUse::StartRunRequest_FederationConfigEntry_DoNotUse() {}
StartRunRequest_FederationConfigEntry_DoNotUse::StartRunRequest_FederationConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StartRunRequest_FederationConfigEntry_DoNotUse::MergeFrom(const StartRunRequest_FederationConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StartRunRequest_FederationConfigEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fexec_2eproto_getter, &descriptor_table_flwr_2fproto_2fexec_2eproto_once,
      file_level_metadata_flwr_2fproto_2fexec_2eproto[1]);
}

// ===================================================================

class StartRunRequest::_Internal {
 public:
  static const ::flwr::proto::Fab& fab(const StartRunRequest* msg);
};

const ::flwr::proto::Fab&
StartRunRequest::_Internal::fab(const StartRunRequest* msg) {
  return *msg->fab_;
}
void StartRunRequest::clear_fab() {
  if (GetArenaForAllocation() == nullptr && fab_ != nullptr) {
    delete fab_;
  }
  fab_ = nullptr;
}
void StartRunRequest::clear_override_config() {
  override_config_.Clear();
}
void StartRunRequest::clear_federation_config() {
  federation_config_.Clear();
}
StartRunRequest::StartRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  override_config_(arena),
  federation_config_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &StartRunRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.StartRunRequest)
}
StartRunRequest::StartRunRequest(const StartRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  override_config_.MergeFrom(from.override_config_);
  federation_config_.MergeFrom(from.federation_config_);
  if (from._internal_has_fab()) {
    fab_ = new ::flwr::proto::Fab(*from.fab_);
  } else {
    fab_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.StartRunRequest)
}

inline void StartRunRequest::SharedCtor() {
fab_ = nullptr;
}

StartRunRequest::~StartRunRequest() {
  // @@protoc_insertion_point(destructor:flwr.proto.StartRunRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void StartRunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  override_config_.Destruct();
  federation_config_.Destruct();
  if (this != internal_default_instance()) delete fab_;
}

void StartRunRequest::ArenaDtor(void* object) {
  StartRunRequest* _this = reinterpret_cast< StartRunRequest* >(object);
  _this->override_config_.Destruct();
  _this->federation_config_.Destruct();
}
void StartRunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartRunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.StartRunRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  override_config_.Clear();
  federation_config_.Clear();
  if (GetArenaForAllocation() == nullptr && fab_ != nullptr) {
    delete fab_;
  }
  fab_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRunRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flwr.proto.Fab fab = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fab(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .flwr.proto.Scalar> override_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&override_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .flwr.proto.Scalar> federation_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&federation_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartRunRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.StartRunRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .flwr.proto.Fab fab = 1;
  if (this->_internal_has_fab()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fab(this),
        _Internal::fab(this).GetCachedSize(), target, stream);
  }

  // map<string, .flwr.proto.Scalar> override_config = 2;
  if (!this->_internal_override_config().empty()) {
    using MapType = ::_pb::Map<std::string, ::flwr::proto::Scalar>;
    using WireHelper = StartRunRequest_OverrideConfigEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_override_config();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "flwr.proto.StartRunRequest.OverrideConfigEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .flwr.proto.Scalar> federation_config = 3;
  if (!this->_internal_federation_config().empty()) {
    using MapType = ::_pb::Map<std::string, ::flwr::proto::Scalar>;
    using WireHelper = StartRunRequest_FederationConfigEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_federation_config();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "flwr.proto.StartRunRequest.FederationConfigEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.StartRunRequest)
  return target;
}

size_t StartRunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.StartRunRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flwr.proto.Scalar> override_config = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_override_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_iterator
      it = this->_internal_override_config().begin();
      it != this->_internal_override_config().end(); ++it) {
    total_size += StartRunRequest_OverrideConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .flwr.proto.Scalar> federation_config = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_federation_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_iterator
      it = this->_internal_federation_config().begin();
      it != this->_internal_federation_config().end(); ++it) {
    total_size += StartRunRequest_FederationConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .flwr.proto.Fab fab = 1;
  if (this->_internal_has_fab()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fab_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartRunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartRunRequest::GetClassData() const { return &_class_data_; }

void StartRunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartRunRequest *>(to)->MergeFrom(
      static_cast<const StartRunRequest &>(from));
}


void StartRunRequest::MergeFrom(const StartRunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.StartRunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  override_config_.MergeFrom(from.override_config_);
  federation_config_.MergeFrom(from.federation_config_);
  if (from._internal_has_fab()) {
    _internal_mutable_fab()->::flwr::proto::Fab::MergeFrom(from._internal_fab());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartRunRequest::CopyFrom(const StartRunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.StartRunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRunRequest::IsInitialized() const {
  return true;
}

void StartRunRequest::InternalSwap(StartRunRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  override_config_.InternalSwap(&other->override_config_);
  federation_config_.InternalSwap(&other->federation_config_);
  swap(fab_, other->fab_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRunRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fexec_2eproto_getter, &descriptor_table_flwr_2fproto_2fexec_2eproto_once,
      file_level_metadata_flwr_2fproto_2fexec_2eproto[2]);
}

// ===================================================================

class StartRunResponse::_Internal {
 public:
};

StartRunResponse::StartRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.StartRunResponse)
}
StartRunResponse::StartRunResponse(const StartRunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_ = from.run_id_;
  // @@protoc_insertion_point(copy_constructor:flwr.proto.StartRunResponse)
}

inline void StartRunResponse::SharedCtor() {
run_id_ = uint64_t{0u};
}

StartRunResponse::~StartRunResponse() {
  // @@protoc_insertion_point(destructor:flwr.proto.StartRunResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartRunResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartRunResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartRunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.StartRunResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRunResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartRunResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.StartRunResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.StartRunResponse)
  return target;
}

size_t StartRunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.StartRunResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartRunResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartRunResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartRunResponse::GetClassData() const { return &_class_data_; }

void StartRunResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartRunResponse *>(to)->MergeFrom(
      static_cast<const StartRunResponse &>(from));
}


void StartRunResponse::MergeFrom(const StartRunResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.StartRunResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_run_id() != 0) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartRunResponse::CopyFrom(const StartRunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.StartRunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRunResponse::IsInitialized() const {
  return true;
}

void StartRunResponse::InternalSwap(StartRunResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(run_id_, other->run_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRunResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fexec_2eproto_getter, &descriptor_table_flwr_2fproto_2fexec_2eproto_once,
      file_level_metadata_flwr_2fproto_2fexec_2eproto[3]);
}

// ===================================================================

class StreamLogsRequest::_Internal {
 public:
};

StreamLogsRequest::StreamLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.StreamLogsRequest)
}
StreamLogsRequest::StreamLogsRequest(const StreamLogsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_ = from.run_id_;
  // @@protoc_insertion_point(copy_constructor:flwr.proto.StreamLogsRequest)
}

inline void StreamLogsRequest::SharedCtor() {
run_id_ = uint64_t{0u};
}

StreamLogsRequest::~StreamLogsRequest() {
  // @@protoc_insertion_point(destructor:flwr.proto.StreamLogsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamLogsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamLogsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamLogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.StreamLogsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamLogsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamLogsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.StreamLogsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.StreamLogsRequest)
  return target;
}

size_t StreamLogsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.StreamLogsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamLogsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamLogsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamLogsRequest::GetClassData() const { return &_class_data_; }

void StreamLogsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamLogsRequest *>(to)->MergeFrom(
      static_cast<const StreamLogsRequest &>(from));
}


void StreamLogsRequest::MergeFrom(const StreamLogsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.StreamLogsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_run_id() != 0) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamLogsRequest::CopyFrom(const StreamLogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.StreamLogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamLogsRequest::IsInitialized() const {
  return true;
}

void StreamLogsRequest::InternalSwap(StreamLogsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(run_id_, other->run_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamLogsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fexec_2eproto_getter, &descriptor_table_flwr_2fproto_2fexec_2eproto_once,
      file_level_metadata_flwr_2fproto_2fexec_2eproto[4]);
}

// ===================================================================

class StreamLogsResponse::_Internal {
 public:
};

StreamLogsResponse::StreamLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.StreamLogsResponse)
}
StreamLogsResponse::StreamLogsResponse(const StreamLogsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    log_output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log_output().empty()) {
    log_output_.Set(from._internal_log_output(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.StreamLogsResponse)
}

inline void StreamLogsResponse::SharedCtor() {
log_output_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  log_output_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamLogsResponse::~StreamLogsResponse() {
  // @@protoc_insertion_point(destructor:flwr.proto.StreamLogsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamLogsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  log_output_.Destroy();
}

void StreamLogsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamLogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.StreamLogsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_output_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamLogsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string log_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_log_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.StreamLogsResponse.log_output"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamLogsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.StreamLogsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string log_output = 1;
  if (!this->_internal_log_output().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_output().data(), static_cast<int>(this->_internal_log_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.StreamLogsResponse.log_output");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_log_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.StreamLogsResponse)
  return target;
}

size_t StreamLogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.StreamLogsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log_output = 1;
  if (!this->_internal_log_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_output());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamLogsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamLogsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamLogsResponse::GetClassData() const { return &_class_data_; }

void StreamLogsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamLogsResponse *>(to)->MergeFrom(
      static_cast<const StreamLogsResponse &>(from));
}


void StreamLogsResponse::MergeFrom(const StreamLogsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.StreamLogsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log_output().empty()) {
    _internal_set_log_output(from._internal_log_output());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamLogsResponse::CopyFrom(const StreamLogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.StreamLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamLogsResponse::IsInitialized() const {
  return true;
}

void StreamLogsResponse::InternalSwap(StreamLogsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &log_output_, lhs_arena,
      &other->log_output_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamLogsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fexec_2eproto_getter, &descriptor_table_flwr_2fproto_2fexec_2eproto_once,
      file_level_metadata_flwr_2fproto_2fexec_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flwr::proto::StartRunRequest_OverrideConfigEntry_DoNotUse*
Arena::CreateMaybeMessage< ::flwr::proto::StartRunRequest_OverrideConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::StartRunRequest_OverrideConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::StartRunRequest_FederationConfigEntry_DoNotUse*
Arena::CreateMaybeMessage< ::flwr::proto::StartRunRequest_FederationConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::StartRunRequest_FederationConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::StartRunRequest*
Arena::CreateMaybeMessage< ::flwr::proto::StartRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::StartRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::StartRunResponse*
Arena::CreateMaybeMessage< ::flwr::proto::StartRunResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::StartRunResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::StreamLogsRequest*
Arena::CreateMaybeMessage< ::flwr::proto::StreamLogsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::StreamLogsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::StreamLogsResponse*
Arena::CreateMaybeMessage< ::flwr::proto::StreamLogsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::StreamLogsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

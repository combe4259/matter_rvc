// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flwr/proto/driver.proto

#include "flwr/proto/driver.pb.h"
#include "flwr/proto/driver.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flwr {
namespace proto {

static const char* Driver_method_names[] = {
  "/flwr.proto.Driver/CreateRun",
  "/flwr.proto.Driver/GetNodes",
  "/flwr.proto.Driver/PushTaskIns",
  "/flwr.proto.Driver/PullTaskRes",
  "/flwr.proto.Driver/GetRun",
  "/flwr.proto.Driver/GetFab",
};

std::unique_ptr< Driver::Stub> Driver::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Driver::Stub> stub(new Driver::Stub(channel, options));
  return stub;
}

Driver::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateRun_(Driver_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodes_(Driver_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushTaskIns_(Driver_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PullTaskRes_(Driver_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRun_(Driver_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFab_(Driver_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Driver::Stub::CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::flwr::proto::CreateRunResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRun_, context, request, response);
}

void Driver::Stub::async::CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRun_, context, request, response, std::move(f));
}

void Driver::Stub::async::CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRun_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>* Driver::Stub::PrepareAsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::CreateRunResponse, ::flwr::proto::CreateRunRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRun_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>* Driver::Stub::AsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRunRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Driver::Stub::GetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::flwr::proto::GetNodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::GetNodesRequest, ::flwr::proto::GetNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNodes_, context, request, response);
}

void Driver::Stub::async::GetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest* request, ::flwr::proto::GetNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::GetNodesRequest, ::flwr::proto::GetNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodes_, context, request, response, std::move(f));
}

void Driver::Stub::async::GetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest* request, ::flwr::proto::GetNodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::GetNodesResponse>* Driver::Stub::PrepareAsyncGetNodesRaw(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::GetNodesResponse, ::flwr::proto::GetNodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::GetNodesResponse>* Driver::Stub::AsyncGetNodesRaw(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Driver::Stub::PushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::flwr::proto::PushTaskInsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::PushTaskInsRequest, ::flwr::proto::PushTaskInsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushTaskIns_, context, request, response);
}

void Driver::Stub::async::PushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest* request, ::flwr::proto::PushTaskInsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::PushTaskInsRequest, ::flwr::proto::PushTaskInsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushTaskIns_, context, request, response, std::move(f));
}

void Driver::Stub::async::PushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest* request, ::flwr::proto::PushTaskInsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushTaskIns_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::PushTaskInsResponse>* Driver::Stub::PrepareAsyncPushTaskInsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::PushTaskInsResponse, ::flwr::proto::PushTaskInsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushTaskIns_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::PushTaskInsResponse>* Driver::Stub::AsyncPushTaskInsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushTaskInsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Driver::Stub::PullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::flwr::proto::PullTaskResResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::PullTaskResRequest, ::flwr::proto::PullTaskResResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PullTaskRes_, context, request, response);
}

void Driver::Stub::async::PullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest* request, ::flwr::proto::PullTaskResResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::PullTaskResRequest, ::flwr::proto::PullTaskResResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullTaskRes_, context, request, response, std::move(f));
}

void Driver::Stub::async::PullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest* request, ::flwr::proto::PullTaskResResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullTaskRes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::PullTaskResResponse>* Driver::Stub::PrepareAsyncPullTaskResRaw(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::PullTaskResResponse, ::flwr::proto::PullTaskResRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PullTaskRes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::PullTaskResResponse>* Driver::Stub::AsyncPullTaskResRaw(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPullTaskResRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Driver::Stub::GetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::flwr::proto::GetRunResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::GetRunRequest, ::flwr::proto::GetRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRun_, context, request, response);
}

void Driver::Stub::async::GetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest* request, ::flwr::proto::GetRunResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::GetRunRequest, ::flwr::proto::GetRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRun_, context, request, response, std::move(f));
}

void Driver::Stub::async::GetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest* request, ::flwr::proto::GetRunResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRun_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunResponse>* Driver::Stub::PrepareAsyncGetRunRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::GetRunResponse, ::flwr::proto::GetRunRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRun_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunResponse>* Driver::Stub::AsyncGetRunRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRunRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Driver::Stub::GetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::flwr::proto::GetFabResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::GetFabRequest, ::flwr::proto::GetFabResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFab_, context, request, response);
}

void Driver::Stub::async::GetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest* request, ::flwr::proto::GetFabResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::GetFabRequest, ::flwr::proto::GetFabResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFab_, context, request, response, std::move(f));
}

void Driver::Stub::async::GetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest* request, ::flwr::proto::GetFabResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFab_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::GetFabResponse>* Driver::Stub::PrepareAsyncGetFabRaw(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::GetFabResponse, ::flwr::proto::GetFabRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFab_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::GetFabResponse>* Driver::Stub::AsyncGetFabRaw(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFabRaw(context, request, cq);
  result->StartCall();
  return result;
}

Driver::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Driver_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Driver::Service, ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Driver::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::CreateRunRequest* req,
             ::flwr::proto::CreateRunResponse* resp) {
               return service->CreateRun(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Driver_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Driver::Service, ::flwr::proto::GetNodesRequest, ::flwr::proto::GetNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Driver::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::GetNodesRequest* req,
             ::flwr::proto::GetNodesResponse* resp) {
               return service->GetNodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Driver_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Driver::Service, ::flwr::proto::PushTaskInsRequest, ::flwr::proto::PushTaskInsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Driver::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::PushTaskInsRequest* req,
             ::flwr::proto::PushTaskInsResponse* resp) {
               return service->PushTaskIns(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Driver_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Driver::Service, ::flwr::proto::PullTaskResRequest, ::flwr::proto::PullTaskResResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Driver::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::PullTaskResRequest* req,
             ::flwr::proto::PullTaskResResponse* resp) {
               return service->PullTaskRes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Driver_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Driver::Service, ::flwr::proto::GetRunRequest, ::flwr::proto::GetRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Driver::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::GetRunRequest* req,
             ::flwr::proto::GetRunResponse* resp) {
               return service->GetRun(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Driver_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Driver::Service, ::flwr::proto::GetFabRequest, ::flwr::proto::GetFabResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Driver::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::GetFabRequest* req,
             ::flwr::proto::GetFabResponse* resp) {
               return service->GetFab(ctx, req, resp);
             }, this)));
}

Driver::Service::~Service() {
}

::grpc::Status Driver::Service::CreateRun(::grpc::ServerContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Driver::Service::GetNodes(::grpc::ServerContext* context, const ::flwr::proto::GetNodesRequest* request, ::flwr::proto::GetNodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Driver::Service::PushTaskIns(::grpc::ServerContext* context, const ::flwr::proto::PushTaskInsRequest* request, ::flwr::proto::PushTaskInsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Driver::Service::PullTaskRes(::grpc::ServerContext* context, const ::flwr::proto::PullTaskResRequest* request, ::flwr::proto::PullTaskResResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Driver::Service::GetRun(::grpc::ServerContext* context, const ::flwr::proto::GetRunRequest* request, ::flwr::proto::GetRunResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Driver::Service::GetFab(::grpc::ServerContext* context, const ::flwr::proto::GetFabRequest* request, ::flwr::proto::GetFabResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flwr
}  // namespace proto


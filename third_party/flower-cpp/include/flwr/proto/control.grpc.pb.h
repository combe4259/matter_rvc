// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flwr/proto/control.proto
// Original file comments:
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_flwr_2fproto_2fcontrol_2eproto__INCLUDED
#define GRPC_flwr_2fproto_2fcontrol_2eproto__INCLUDED

#include "flwr/proto/control.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace flwr {
namespace proto {

class Control final {
 public:
  static constexpr char const* service_full_name() {
    return "flwr.proto.Control";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Request to create a new run
    virtual ::grpc::Status CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::flwr::proto::CreateRunResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>> AsyncCreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>>(AsyncCreateRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>> PrepareAsyncCreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>>(PrepareAsyncCreateRunRaw(context, request, cq));
    }
    // Get the status of a given run
    virtual ::grpc::Status GetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::flwr::proto::GetRunStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunStatusResponse>> AsyncGetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunStatusResponse>>(AsyncGetRunStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunStatusResponse>> PrepareAsyncGetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunStatusResponse>>(PrepareAsyncGetRunStatusRaw(context, request, cq));
    }
    // Update the status of a given run
    virtual ::grpc::Status UpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::flwr::proto::UpdateRunStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::UpdateRunStatusResponse>> AsyncUpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::UpdateRunStatusResponse>>(AsyncUpdateRunStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::UpdateRunStatusResponse>> PrepareAsyncUpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::UpdateRunStatusResponse>>(PrepareAsyncUpdateRunStatusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Request to create a new run
      virtual void CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get the status of a given run
      virtual void GetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest* request, ::flwr::proto::GetRunStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest* request, ::flwr::proto::GetRunStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update the status of a given run
      virtual void UpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest* request, ::flwr::proto::UpdateRunStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest* request, ::flwr::proto::UpdateRunStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>* AsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>* PrepareAsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunStatusResponse>* AsyncGetRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunStatusResponse>* PrepareAsyncGetRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::UpdateRunStatusResponse>* AsyncUpdateRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::UpdateRunStatusResponse>* PrepareAsyncUpdateRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::flwr::proto::CreateRunResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>> AsyncCreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>>(AsyncCreateRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>> PrepareAsyncCreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>>(PrepareAsyncCreateRunRaw(context, request, cq));
    }
    ::grpc::Status GetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::flwr::proto::GetRunStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunStatusResponse>> AsyncGetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunStatusResponse>>(AsyncGetRunStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunStatusResponse>> PrepareAsyncGetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunStatusResponse>>(PrepareAsyncGetRunStatusRaw(context, request, cq));
    }
    ::grpc::Status UpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::flwr::proto::UpdateRunStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::UpdateRunStatusResponse>> AsyncUpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::UpdateRunStatusResponse>>(AsyncUpdateRunStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::UpdateRunStatusResponse>> PrepareAsyncUpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::UpdateRunStatusResponse>>(PrepareAsyncUpdateRunStatusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest* request, ::flwr::proto::GetRunStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest* request, ::flwr::proto::GetRunStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest* request, ::flwr::proto::UpdateRunStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest* request, ::flwr::proto::UpdateRunStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>* AsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>* PrepareAsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunStatusResponse>* AsyncGetRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunStatusResponse>* PrepareAsyncGetRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::UpdateRunStatusResponse>* AsyncUpdateRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::UpdateRunStatusResponse>* PrepareAsyncUpdateRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRun_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRunStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRunStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Request to create a new run
    virtual ::grpc::Status CreateRun(::grpc::ServerContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response);
    // Get the status of a given run
    virtual ::grpc::Status GetRunStatus(::grpc::ServerContext* context, const ::flwr::proto::GetRunStatusRequest* request, ::flwr::proto::GetRunStatusResponse* response);
    // Update the status of a given run
    virtual ::grpc::Status UpdateRunStatus(::grpc::ServerContext* context, const ::flwr::proto::UpdateRunStatusRequest* request, ::flwr::proto::UpdateRunStatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRun() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRun(::grpc::ServerContext* context, ::flwr::proto::CreateRunRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::CreateRunResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRunStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunStatusRequest* /*request*/, ::flwr::proto::GetRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRunStatus(::grpc::ServerContext* context, ::flwr::proto::GetRunStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::GetRunStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRunStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::UpdateRunStatusRequest* /*request*/, ::flwr::proto::UpdateRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRunStatus(::grpc::ServerContext* context, ::flwr::proto::UpdateRunStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::UpdateRunStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateRun<WithAsyncMethod_GetRunStatus<WithAsyncMethod_UpdateRunStatus<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateRun() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response) { return this->CreateRun(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRun(
        ::grpc::MessageAllocator< ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRun(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRunStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::GetRunStatusRequest, ::flwr::proto::GetRunStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::GetRunStatusRequest* request, ::flwr::proto::GetRunStatusResponse* response) { return this->GetRunStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetRunStatus(
        ::grpc::MessageAllocator< ::flwr::proto::GetRunStatusRequest, ::flwr::proto::GetRunStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::GetRunStatusRequest, ::flwr::proto::GetRunStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunStatusRequest* /*request*/, ::flwr::proto::GetRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRunStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::GetRunStatusRequest* /*request*/, ::flwr::proto::GetRunStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateRunStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::UpdateRunStatusRequest, ::flwr::proto::UpdateRunStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::UpdateRunStatusRequest* request, ::flwr::proto::UpdateRunStatusResponse* response) { return this->UpdateRunStatus(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRunStatus(
        ::grpc::MessageAllocator< ::flwr::proto::UpdateRunStatusRequest, ::flwr::proto::UpdateRunStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::UpdateRunStatusRequest, ::flwr::proto::UpdateRunStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::UpdateRunStatusRequest* /*request*/, ::flwr::proto::UpdateRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRunStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::UpdateRunStatusRequest* /*request*/, ::flwr::proto::UpdateRunStatusResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateRun<WithCallbackMethod_GetRunStatus<WithCallbackMethod_UpdateRunStatus<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRun() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRunStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunStatusRequest* /*request*/, ::flwr::proto::GetRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRunStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::UpdateRunStatusRequest* /*request*/, ::flwr::proto::UpdateRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRun() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRunStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunStatusRequest* /*request*/, ::flwr::proto::GetRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRunStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRunStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::UpdateRunStatusRequest* /*request*/, ::flwr::proto::UpdateRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRunStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateRun() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRun(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRun(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRunStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRunStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunStatusRequest* /*request*/, ::flwr::proto::GetRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRunStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateRunStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRunStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::UpdateRunStatusRequest* /*request*/, ::flwr::proto::UpdateRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRunStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRun() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse>* streamer) {
                       return this->StreamedCreateRun(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRun(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::CreateRunRequest,::flwr::proto::CreateRunResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRunStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::GetRunStatusRequest, ::flwr::proto::GetRunStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::GetRunStatusRequest, ::flwr::proto::GetRunStatusResponse>* streamer) {
                       return this->StreamedGetRunStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunStatusRequest* /*request*/, ::flwr::proto::GetRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRunStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::GetRunStatusRequest,::flwr::proto::GetRunStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRunStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRunStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::UpdateRunStatusRequest, ::flwr::proto::UpdateRunStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::UpdateRunStatusRequest, ::flwr::proto::UpdateRunStatusResponse>* streamer) {
                       return this->StreamedUpdateRunStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRunStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRunStatus(::grpc::ServerContext* /*context*/, const ::flwr::proto::UpdateRunStatusRequest* /*request*/, ::flwr::proto::UpdateRunStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRunStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::UpdateRunStatusRequest,::flwr::proto::UpdateRunStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateRun<WithStreamedUnaryMethod_GetRunStatus<WithStreamedUnaryMethod_UpdateRunStatus<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateRun<WithStreamedUnaryMethod_GetRunStatus<WithStreamedUnaryMethod_UpdateRunStatus<Service > > > StreamedService;
};

}  // namespace proto
}  // namespace flwr


#endif  // GRPC_flwr_2fproto_2fcontrol_2eproto__INCLUDED

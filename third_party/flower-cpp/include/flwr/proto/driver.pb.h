// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/driver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fdriver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fdriver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flwr/proto/node.pb.h"
#include "flwr/proto/task.pb.h"
#include "flwr/proto/run.pb.h"
#include "flwr/proto/fab.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flwr_2fproto_2fdriver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flwr_2fproto_2fdriver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2fdriver_2eproto;
namespace flwr {
namespace proto {
class GetNodesRequest;
struct GetNodesRequestDefaultTypeInternal;
extern GetNodesRequestDefaultTypeInternal _GetNodesRequest_default_instance_;
class GetNodesResponse;
struct GetNodesResponseDefaultTypeInternal;
extern GetNodesResponseDefaultTypeInternal _GetNodesResponse_default_instance_;
class PullTaskResRequest;
struct PullTaskResRequestDefaultTypeInternal;
extern PullTaskResRequestDefaultTypeInternal _PullTaskResRequest_default_instance_;
class PullTaskResResponse;
struct PullTaskResResponseDefaultTypeInternal;
extern PullTaskResResponseDefaultTypeInternal _PullTaskResResponse_default_instance_;
class PushTaskInsRequest;
struct PushTaskInsRequestDefaultTypeInternal;
extern PushTaskInsRequestDefaultTypeInternal _PushTaskInsRequest_default_instance_;
class PushTaskInsResponse;
struct PushTaskInsResponseDefaultTypeInternal;
extern PushTaskInsResponseDefaultTypeInternal _PushTaskInsResponse_default_instance_;
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> ::flwr::proto::GetNodesRequest* Arena::CreateMaybeMessage<::flwr::proto::GetNodesRequest>(Arena*);
template<> ::flwr::proto::GetNodesResponse* Arena::CreateMaybeMessage<::flwr::proto::GetNodesResponse>(Arena*);
template<> ::flwr::proto::PullTaskResRequest* Arena::CreateMaybeMessage<::flwr::proto::PullTaskResRequest>(Arena*);
template<> ::flwr::proto::PullTaskResResponse* Arena::CreateMaybeMessage<::flwr::proto::PullTaskResResponse>(Arena*);
template<> ::flwr::proto::PushTaskInsRequest* Arena::CreateMaybeMessage<::flwr::proto::PushTaskInsRequest>(Arena*);
template<> ::flwr::proto::PushTaskInsResponse* Arena::CreateMaybeMessage<::flwr::proto::PushTaskInsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flwr {
namespace proto {

// ===================================================================

class GetNodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.GetNodesRequest) */ {
 public:
  inline GetNodesRequest() : GetNodesRequest(nullptr) {}
  ~GetNodesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNodesRequest(const GetNodesRequest& from);
  GetNodesRequest(GetNodesRequest&& from) noexcept
    : GetNodesRequest() {
    *this = ::std::move(from);
  }

  inline GetNodesRequest& operator=(const GetNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodesRequest& operator=(GetNodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNodesRequest* internal_default_instance() {
    return reinterpret_cast<const GetNodesRequest*>(
               &_GetNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetNodesRequest& a, GetNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNodesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNodesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.GetNodesRequest";
  }
  protected:
  explicit GetNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
  };
  // uint64 run_id = 1;
  void clear_run_id();
  uint64_t run_id() const;
  void set_run_id(uint64_t value);
  private:
  uint64_t _internal_run_id() const;
  void _internal_set_run_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.GetNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fdriver_2eproto;
};
// -------------------------------------------------------------------

class GetNodesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.GetNodesResponse) */ {
 public:
  inline GetNodesResponse() : GetNodesResponse(nullptr) {}
  ~GetNodesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetNodesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNodesResponse(const GetNodesResponse& from);
  GetNodesResponse(GetNodesResponse&& from) noexcept
    : GetNodesResponse() {
    *this = ::std::move(from);
  }

  inline GetNodesResponse& operator=(const GetNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodesResponse& operator=(GetNodesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNodesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNodesResponse* internal_default_instance() {
    return reinterpret_cast<const GetNodesResponse*>(
               &_GetNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetNodesResponse& a, GetNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNodesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNodesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNodesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.GetNodesResponse";
  }
  protected:
  explicit GetNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .flwr.proto.Node nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::flwr::proto::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Node >*
      mutable_nodes();
  private:
  const ::flwr::proto::Node& _internal_nodes(int index) const;
  ::flwr::proto::Node* _internal_add_nodes();
  public:
  const ::flwr::proto::Node& nodes(int index) const;
  ::flwr::proto::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Node >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:flwr.proto.GetNodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Node > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fdriver_2eproto;
};
// -------------------------------------------------------------------

class PushTaskInsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PushTaskInsRequest) */ {
 public:
  inline PushTaskInsRequest() : PushTaskInsRequest(nullptr) {}
  ~PushTaskInsRequest() override;
  explicit PROTOBUF_CONSTEXPR PushTaskInsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushTaskInsRequest(const PushTaskInsRequest& from);
  PushTaskInsRequest(PushTaskInsRequest&& from) noexcept
    : PushTaskInsRequest() {
    *this = ::std::move(from);
  }

  inline PushTaskInsRequest& operator=(const PushTaskInsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushTaskInsRequest& operator=(PushTaskInsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushTaskInsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushTaskInsRequest* internal_default_instance() {
    return reinterpret_cast<const PushTaskInsRequest*>(
               &_PushTaskInsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PushTaskInsRequest& a, PushTaskInsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PushTaskInsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushTaskInsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushTaskInsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushTaskInsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushTaskInsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PushTaskInsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushTaskInsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PushTaskInsRequest";
  }
  protected:
  explicit PushTaskInsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskInsListFieldNumber = 1,
  };
  // repeated .flwr.proto.TaskIns task_ins_list = 1;
  int task_ins_list_size() const;
  private:
  int _internal_task_ins_list_size() const;
  public:
  void clear_task_ins_list();
  ::flwr::proto::TaskIns* mutable_task_ins_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::TaskIns >*
      mutable_task_ins_list();
  private:
  const ::flwr::proto::TaskIns& _internal_task_ins_list(int index) const;
  ::flwr::proto::TaskIns* _internal_add_task_ins_list();
  public:
  const ::flwr::proto::TaskIns& task_ins_list(int index) const;
  ::flwr::proto::TaskIns* add_task_ins_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::TaskIns >&
      task_ins_list() const;

  // @@protoc_insertion_point(class_scope:flwr.proto.PushTaskInsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::TaskIns > task_ins_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fdriver_2eproto;
};
// -------------------------------------------------------------------

class PushTaskInsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PushTaskInsResponse) */ {
 public:
  inline PushTaskInsResponse() : PushTaskInsResponse(nullptr) {}
  ~PushTaskInsResponse() override;
  explicit PROTOBUF_CONSTEXPR PushTaskInsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushTaskInsResponse(const PushTaskInsResponse& from);
  PushTaskInsResponse(PushTaskInsResponse&& from) noexcept
    : PushTaskInsResponse() {
    *this = ::std::move(from);
  }

  inline PushTaskInsResponse& operator=(const PushTaskInsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushTaskInsResponse& operator=(PushTaskInsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushTaskInsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushTaskInsResponse* internal_default_instance() {
    return reinterpret_cast<const PushTaskInsResponse*>(
               &_PushTaskInsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PushTaskInsResponse& a, PushTaskInsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PushTaskInsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushTaskInsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushTaskInsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushTaskInsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushTaskInsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PushTaskInsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushTaskInsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PushTaskInsResponse";
  }
  protected:
  explicit PushTaskInsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdsFieldNumber = 2,
  };
  // repeated string task_ids = 2;
  int task_ids_size() const;
  private:
  int _internal_task_ids_size() const;
  public:
  void clear_task_ids();
  const std::string& task_ids(int index) const;
  std::string* mutable_task_ids(int index);
  void set_task_ids(int index, const std::string& value);
  void set_task_ids(int index, std::string&& value);
  void set_task_ids(int index, const char* value);
  void set_task_ids(int index, const char* value, size_t size);
  std::string* add_task_ids();
  void add_task_ids(const std::string& value);
  void add_task_ids(std::string&& value);
  void add_task_ids(const char* value);
  void add_task_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& task_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_task_ids();
  private:
  const std::string& _internal_task_ids(int index) const;
  std::string* _internal_add_task_ids();
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.PushTaskInsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> task_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fdriver_2eproto;
};
// -------------------------------------------------------------------

class PullTaskResRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PullTaskResRequest) */ {
 public:
  inline PullTaskResRequest() : PullTaskResRequest(nullptr) {}
  ~PullTaskResRequest() override;
  explicit PROTOBUF_CONSTEXPR PullTaskResRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullTaskResRequest(const PullTaskResRequest& from);
  PullTaskResRequest(PullTaskResRequest&& from) noexcept
    : PullTaskResRequest() {
    *this = ::std::move(from);
  }

  inline PullTaskResRequest& operator=(const PullTaskResRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullTaskResRequest& operator=(PullTaskResRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullTaskResRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullTaskResRequest* internal_default_instance() {
    return reinterpret_cast<const PullTaskResRequest*>(
               &_PullTaskResRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PullTaskResRequest& a, PullTaskResRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullTaskResRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullTaskResRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullTaskResRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullTaskResRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullTaskResRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullTaskResRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullTaskResRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PullTaskResRequest";
  }
  protected:
  explicit PullTaskResRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdsFieldNumber = 2,
    kNodeFieldNumber = 1,
  };
  // repeated string task_ids = 2;
  int task_ids_size() const;
  private:
  int _internal_task_ids_size() const;
  public:
  void clear_task_ids();
  const std::string& task_ids(int index) const;
  std::string* mutable_task_ids(int index);
  void set_task_ids(int index, const std::string& value);
  void set_task_ids(int index, std::string&& value);
  void set_task_ids(int index, const char* value);
  void set_task_ids(int index, const char* value, size_t size);
  std::string* add_task_ids();
  void add_task_ids(const std::string& value);
  void add_task_ids(std::string&& value);
  void add_task_ids(const char* value);
  void add_task_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& task_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_task_ids();
  private:
  const std::string& _internal_task_ids(int index) const;
  std::string* _internal_add_task_ids();
  public:

  // .flwr.proto.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::flwr::proto::Node& node() const;
  PROTOBUF_NODISCARD ::flwr::proto::Node* release_node();
  ::flwr::proto::Node* mutable_node();
  void set_allocated_node(::flwr::proto::Node* node);
  private:
  const ::flwr::proto::Node& _internal_node() const;
  ::flwr::proto::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::flwr::proto::Node* node);
  ::flwr::proto::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:flwr.proto.PullTaskResRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> task_ids_;
  ::flwr::proto::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fdriver_2eproto;
};
// -------------------------------------------------------------------

class PullTaskResResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PullTaskResResponse) */ {
 public:
  inline PullTaskResResponse() : PullTaskResResponse(nullptr) {}
  ~PullTaskResResponse() override;
  explicit PROTOBUF_CONSTEXPR PullTaskResResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullTaskResResponse(const PullTaskResResponse& from);
  PullTaskResResponse(PullTaskResResponse&& from) noexcept
    : PullTaskResResponse() {
    *this = ::std::move(from);
  }

  inline PullTaskResResponse& operator=(const PullTaskResResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullTaskResResponse& operator=(PullTaskResResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullTaskResResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullTaskResResponse* internal_default_instance() {
    return reinterpret_cast<const PullTaskResResponse*>(
               &_PullTaskResResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PullTaskResResponse& a, PullTaskResResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullTaskResResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullTaskResResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullTaskResResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullTaskResResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullTaskResResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullTaskResResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullTaskResResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PullTaskResResponse";
  }
  protected:
  explicit PullTaskResResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskResListFieldNumber = 1,
  };
  // repeated .flwr.proto.TaskRes task_res_list = 1;
  int task_res_list_size() const;
  private:
  int _internal_task_res_list_size() const;
  public:
  void clear_task_res_list();
  ::flwr::proto::TaskRes* mutable_task_res_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::TaskRes >*
      mutable_task_res_list();
  private:
  const ::flwr::proto::TaskRes& _internal_task_res_list(int index) const;
  ::flwr::proto::TaskRes* _internal_add_task_res_list();
  public:
  const ::flwr::proto::TaskRes& task_res_list(int index) const;
  ::flwr::proto::TaskRes* add_task_res_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::TaskRes >&
      task_res_list() const;

  // @@protoc_insertion_point(class_scope:flwr.proto.PullTaskResResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::TaskRes > task_res_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fdriver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetNodesRequest

// uint64 run_id = 1;
inline void GetNodesRequest::clear_run_id() {
  run_id_ = uint64_t{0u};
}
inline uint64_t GetNodesRequest::_internal_run_id() const {
  return run_id_;
}
inline uint64_t GetNodesRequest::run_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.GetNodesRequest.run_id)
  return _internal_run_id();
}
inline void GetNodesRequest::_internal_set_run_id(uint64_t value) {
  
  run_id_ = value;
}
inline void GetNodesRequest::set_run_id(uint64_t value) {
  _internal_set_run_id(value);
  // @@protoc_insertion_point(field_set:flwr.proto.GetNodesRequest.run_id)
}

// -------------------------------------------------------------------

// GetNodesResponse

// repeated .flwr.proto.Node nodes = 1;
inline int GetNodesResponse::_internal_nodes_size() const {
  return nodes_.size();
}
inline int GetNodesResponse::nodes_size() const {
  return _internal_nodes_size();
}
inline ::flwr::proto::Node* GetNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.GetNodesResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Node >*
GetNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.GetNodesResponse.nodes)
  return &nodes_;
}
inline const ::flwr::proto::Node& GetNodesResponse::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::flwr::proto::Node& GetNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.GetNodesResponse.nodes)
  return _internal_nodes(index);
}
inline ::flwr::proto::Node* GetNodesResponse::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::flwr::proto::Node* GetNodesResponse::add_nodes() {
  ::flwr::proto::Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:flwr.proto.GetNodesResponse.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::Node >&
GetNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:flwr.proto.GetNodesResponse.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// PushTaskInsRequest

// repeated .flwr.proto.TaskIns task_ins_list = 1;
inline int PushTaskInsRequest::_internal_task_ins_list_size() const {
  return task_ins_list_.size();
}
inline int PushTaskInsRequest::task_ins_list_size() const {
  return _internal_task_ins_list_size();
}
inline ::flwr::proto::TaskIns* PushTaskInsRequest::mutable_task_ins_list(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.PushTaskInsRequest.task_ins_list)
  return task_ins_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::TaskIns >*
PushTaskInsRequest::mutable_task_ins_list() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.PushTaskInsRequest.task_ins_list)
  return &task_ins_list_;
}
inline const ::flwr::proto::TaskIns& PushTaskInsRequest::_internal_task_ins_list(int index) const {
  return task_ins_list_.Get(index);
}
inline const ::flwr::proto::TaskIns& PushTaskInsRequest::task_ins_list(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.PushTaskInsRequest.task_ins_list)
  return _internal_task_ins_list(index);
}
inline ::flwr::proto::TaskIns* PushTaskInsRequest::_internal_add_task_ins_list() {
  return task_ins_list_.Add();
}
inline ::flwr::proto::TaskIns* PushTaskInsRequest::add_task_ins_list() {
  ::flwr::proto::TaskIns* _add = _internal_add_task_ins_list();
  // @@protoc_insertion_point(field_add:flwr.proto.PushTaskInsRequest.task_ins_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::TaskIns >&
PushTaskInsRequest::task_ins_list() const {
  // @@protoc_insertion_point(field_list:flwr.proto.PushTaskInsRequest.task_ins_list)
  return task_ins_list_;
}

// -------------------------------------------------------------------

// PushTaskInsResponse

// repeated string task_ids = 2;
inline int PushTaskInsResponse::_internal_task_ids_size() const {
  return task_ids_.size();
}
inline int PushTaskInsResponse::task_ids_size() const {
  return _internal_task_ids_size();
}
inline void PushTaskInsResponse::clear_task_ids() {
  task_ids_.Clear();
}
inline std::string* PushTaskInsResponse::add_task_ids() {
  std::string* _s = _internal_add_task_ids();
  // @@protoc_insertion_point(field_add_mutable:flwr.proto.PushTaskInsResponse.task_ids)
  return _s;
}
inline const std::string& PushTaskInsResponse::_internal_task_ids(int index) const {
  return task_ids_.Get(index);
}
inline const std::string& PushTaskInsResponse::task_ids(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.PushTaskInsResponse.task_ids)
  return _internal_task_ids(index);
}
inline std::string* PushTaskInsResponse::mutable_task_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.PushTaskInsResponse.task_ids)
  return task_ids_.Mutable(index);
}
inline void PushTaskInsResponse::set_task_ids(int index, const std::string& value) {
  task_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flwr.proto.PushTaskInsResponse.task_ids)
}
inline void PushTaskInsResponse::set_task_ids(int index, std::string&& value) {
  task_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flwr.proto.PushTaskInsResponse.task_ids)
}
inline void PushTaskInsResponse::set_task_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flwr.proto.PushTaskInsResponse.task_ids)
}
inline void PushTaskInsResponse::set_task_ids(int index, const char* value, size_t size) {
  task_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flwr.proto.PushTaskInsResponse.task_ids)
}
inline std::string* PushTaskInsResponse::_internal_add_task_ids() {
  return task_ids_.Add();
}
inline void PushTaskInsResponse::add_task_ids(const std::string& value) {
  task_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flwr.proto.PushTaskInsResponse.task_ids)
}
inline void PushTaskInsResponse::add_task_ids(std::string&& value) {
  task_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flwr.proto.PushTaskInsResponse.task_ids)
}
inline void PushTaskInsResponse::add_task_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flwr.proto.PushTaskInsResponse.task_ids)
}
inline void PushTaskInsResponse::add_task_ids(const char* value, size_t size) {
  task_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flwr.proto.PushTaskInsResponse.task_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PushTaskInsResponse::task_ids() const {
  // @@protoc_insertion_point(field_list:flwr.proto.PushTaskInsResponse.task_ids)
  return task_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PushTaskInsResponse::mutable_task_ids() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.PushTaskInsResponse.task_ids)
  return &task_ids_;
}

// -------------------------------------------------------------------

// PullTaskResRequest

// .flwr.proto.Node node = 1;
inline bool PullTaskResRequest::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool PullTaskResRequest::has_node() const {
  return _internal_has_node();
}
inline const ::flwr::proto::Node& PullTaskResRequest::_internal_node() const {
  const ::flwr::proto::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Node&>(
      ::flwr::proto::_Node_default_instance_);
}
inline const ::flwr::proto::Node& PullTaskResRequest::node() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullTaskResRequest.node)
  return _internal_node();
}
inline void PullTaskResRequest::unsafe_arena_set_allocated_node(
    ::flwr::proto::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PullTaskResRequest.node)
}
inline ::flwr::proto::Node* PullTaskResRequest::release_node() {
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Node* PullTaskResRequest::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:flwr.proto.PullTaskResRequest.node)
  
  ::flwr::proto::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::flwr::proto::Node* PullTaskResRequest::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::flwr::proto::Node* PullTaskResRequest::mutable_node() {
  ::flwr::proto::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullTaskResRequest.node)
  return _msg;
}
inline void PullTaskResRequest::set_allocated_node(::flwr::proto::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PullTaskResRequest.node)
}

// repeated string task_ids = 2;
inline int PullTaskResRequest::_internal_task_ids_size() const {
  return task_ids_.size();
}
inline int PullTaskResRequest::task_ids_size() const {
  return _internal_task_ids_size();
}
inline void PullTaskResRequest::clear_task_ids() {
  task_ids_.Clear();
}
inline std::string* PullTaskResRequest::add_task_ids() {
  std::string* _s = _internal_add_task_ids();
  // @@protoc_insertion_point(field_add_mutable:flwr.proto.PullTaskResRequest.task_ids)
  return _s;
}
inline const std::string& PullTaskResRequest::_internal_task_ids(int index) const {
  return task_ids_.Get(index);
}
inline const std::string& PullTaskResRequest::task_ids(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullTaskResRequest.task_ids)
  return _internal_task_ids(index);
}
inline std::string* PullTaskResRequest::mutable_task_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullTaskResRequest.task_ids)
  return task_ids_.Mutable(index);
}
inline void PullTaskResRequest::set_task_ids(int index, const std::string& value) {
  task_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flwr.proto.PullTaskResRequest.task_ids)
}
inline void PullTaskResRequest::set_task_ids(int index, std::string&& value) {
  task_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flwr.proto.PullTaskResRequest.task_ids)
}
inline void PullTaskResRequest::set_task_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flwr.proto.PullTaskResRequest.task_ids)
}
inline void PullTaskResRequest::set_task_ids(int index, const char* value, size_t size) {
  task_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flwr.proto.PullTaskResRequest.task_ids)
}
inline std::string* PullTaskResRequest::_internal_add_task_ids() {
  return task_ids_.Add();
}
inline void PullTaskResRequest::add_task_ids(const std::string& value) {
  task_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flwr.proto.PullTaskResRequest.task_ids)
}
inline void PullTaskResRequest::add_task_ids(std::string&& value) {
  task_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flwr.proto.PullTaskResRequest.task_ids)
}
inline void PullTaskResRequest::add_task_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flwr.proto.PullTaskResRequest.task_ids)
}
inline void PullTaskResRequest::add_task_ids(const char* value, size_t size) {
  task_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flwr.proto.PullTaskResRequest.task_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PullTaskResRequest::task_ids() const {
  // @@protoc_insertion_point(field_list:flwr.proto.PullTaskResRequest.task_ids)
  return task_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PullTaskResRequest::mutable_task_ids() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.PullTaskResRequest.task_ids)
  return &task_ids_;
}

// -------------------------------------------------------------------

// PullTaskResResponse

// repeated .flwr.proto.TaskRes task_res_list = 1;
inline int PullTaskResResponse::_internal_task_res_list_size() const {
  return task_res_list_.size();
}
inline int PullTaskResResponse::task_res_list_size() const {
  return _internal_task_res_list_size();
}
inline ::flwr::proto::TaskRes* PullTaskResResponse::mutable_task_res_list(int index) {
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullTaskResResponse.task_res_list)
  return task_res_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::TaskRes >*
PullTaskResResponse::mutable_task_res_list() {
  // @@protoc_insertion_point(field_mutable_list:flwr.proto.PullTaskResResponse.task_res_list)
  return &task_res_list_;
}
inline const ::flwr::proto::TaskRes& PullTaskResResponse::_internal_task_res_list(int index) const {
  return task_res_list_.Get(index);
}
inline const ::flwr::proto::TaskRes& PullTaskResResponse::task_res_list(int index) const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullTaskResResponse.task_res_list)
  return _internal_task_res_list(index);
}
inline ::flwr::proto::TaskRes* PullTaskResResponse::_internal_add_task_res_list() {
  return task_res_list_.Add();
}
inline ::flwr::proto::TaskRes* PullTaskResResponse::add_task_res_list() {
  ::flwr::proto::TaskRes* _add = _internal_add_task_res_list();
  // @@protoc_insertion_point(field_add:flwr.proto.PullTaskResResponse.task_res_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flwr::proto::TaskRes >&
PullTaskResResponse::task_res_list() const {
  // @@protoc_insertion_point(field_list:flwr.proto.PullTaskResResponse.task_res_list)
  return task_res_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flwr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fdriver_2eproto

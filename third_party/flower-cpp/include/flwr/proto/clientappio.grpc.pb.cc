// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flwr/proto/clientappio.proto

#include "flwr/proto/clientappio.pb.h"
#include "flwr/proto/clientappio.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flwr {
namespace proto {

static const char* ClientAppIo_method_names[] = {
  "/flwr.proto.ClientAppIo/GetToken",
  "/flwr.proto.ClientAppIo/PullClientAppInputs",
  "/flwr.proto.ClientAppIo/PushClientAppOutputs",
};

std::unique_ptr< ClientAppIo::Stub> ClientAppIo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientAppIo::Stub> stub(new ClientAppIo::Stub(channel, options));
  return stub;
}

ClientAppIo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetToken_(ClientAppIo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PullClientAppInputs_(ClientAppIo_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushClientAppOutputs_(ClientAppIo_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientAppIo::Stub::GetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::flwr::proto::GetTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::GetTokenRequest, ::flwr::proto::GetTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetToken_, context, request, response);
}

void ClientAppIo::Stub::async::GetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest* request, ::flwr::proto::GetTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::GetTokenRequest, ::flwr::proto::GetTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToken_, context, request, response, std::move(f));
}

void ClientAppIo::Stub::async::GetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest* request, ::flwr::proto::GetTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::GetTokenResponse>* ClientAppIo::Stub::PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::GetTokenResponse, ::flwr::proto::GetTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::GetTokenResponse>* ClientAppIo::Stub::AsyncGetTokenRaw(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientAppIo::Stub::PullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::flwr::proto::PullClientAppInputsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::PullClientAppInputsRequest, ::flwr::proto::PullClientAppInputsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PullClientAppInputs_, context, request, response);
}

void ClientAppIo::Stub::async::PullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest* request, ::flwr::proto::PullClientAppInputsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::PullClientAppInputsRequest, ::flwr::proto::PullClientAppInputsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullClientAppInputs_, context, request, response, std::move(f));
}

void ClientAppIo::Stub::async::PullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest* request, ::flwr::proto::PullClientAppInputsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullClientAppInputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::PullClientAppInputsResponse>* ClientAppIo::Stub::PrepareAsyncPullClientAppInputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::PullClientAppInputsResponse, ::flwr::proto::PullClientAppInputsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PullClientAppInputs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::PullClientAppInputsResponse>* ClientAppIo::Stub::AsyncPullClientAppInputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPullClientAppInputsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientAppIo::Stub::PushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::flwr::proto::PushClientAppOutputsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::PushClientAppOutputsRequest, ::flwr::proto::PushClientAppOutputsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushClientAppOutputs_, context, request, response);
}

void ClientAppIo::Stub::async::PushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest* request, ::flwr::proto::PushClientAppOutputsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::PushClientAppOutputsRequest, ::flwr::proto::PushClientAppOutputsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushClientAppOutputs_, context, request, response, std::move(f));
}

void ClientAppIo::Stub::async::PushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest* request, ::flwr::proto::PushClientAppOutputsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushClientAppOutputs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::PushClientAppOutputsResponse>* ClientAppIo::Stub::PrepareAsyncPushClientAppOutputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::PushClientAppOutputsResponse, ::flwr::proto::PushClientAppOutputsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushClientAppOutputs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::PushClientAppOutputsResponse>* ClientAppIo::Stub::AsyncPushClientAppOutputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushClientAppOutputsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientAppIo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientAppIo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientAppIo::Service, ::flwr::proto::GetTokenRequest, ::flwr::proto::GetTokenResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientAppIo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::GetTokenRequest* req,
             ::flwr::proto::GetTokenResponse* resp) {
               return service->GetToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientAppIo_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientAppIo::Service, ::flwr::proto::PullClientAppInputsRequest, ::flwr::proto::PullClientAppInputsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientAppIo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::PullClientAppInputsRequest* req,
             ::flwr::proto::PullClientAppInputsResponse* resp) {
               return service->PullClientAppInputs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientAppIo_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientAppIo::Service, ::flwr::proto::PushClientAppOutputsRequest, ::flwr::proto::PushClientAppOutputsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientAppIo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::PushClientAppOutputsRequest* req,
             ::flwr::proto::PushClientAppOutputsResponse* resp) {
               return service->PushClientAppOutputs(ctx, req, resp);
             }, this)));
}

ClientAppIo::Service::~Service() {
}

::grpc::Status ClientAppIo::Service::GetToken(::grpc::ServerContext* context, const ::flwr::proto::GetTokenRequest* request, ::flwr::proto::GetTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientAppIo::Service::PullClientAppInputs(::grpc::ServerContext* context, const ::flwr::proto::PullClientAppInputsRequest* request, ::flwr::proto::PullClientAppInputsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientAppIo::Service::PushClientAppOutputs(::grpc::ServerContext* context, const ::flwr::proto::PushClientAppOutputsRequest* request, ::flwr::proto::PushClientAppOutputsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flwr
}  // namespace proto


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flwr/proto/exec.proto

#include "flwr/proto/exec.pb.h"
#include "flwr/proto/exec.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flwr {
namespace proto {

static const char* Exec_method_names[] = {
  "/flwr.proto.Exec/StartRun",
  "/flwr.proto.Exec/StreamLogs",
};

std::unique_ptr< Exec::Stub> Exec::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Exec::Stub> stub(new Exec::Stub(channel, options));
  return stub;
}

Exec::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartRun_(Exec_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamLogs_(Exec_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Exec::Stub::StartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::flwr::proto::StartRunResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::StartRunRequest, ::flwr::proto::StartRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartRun_, context, request, response);
}

void Exec::Stub::async::StartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest* request, ::flwr::proto::StartRunResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::StartRunRequest, ::flwr::proto::StartRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRun_, context, request, response, std::move(f));
}

void Exec::Stub::async::StartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest* request, ::flwr::proto::StartRunResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRun_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::StartRunResponse>* Exec::Stub::PrepareAsyncStartRunRaw(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::StartRunResponse, ::flwr::proto::StartRunRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartRun_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::StartRunResponse>* Exec::Stub::AsyncStartRunRaw(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartRunRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::flwr::proto::StreamLogsResponse>* Exec::Stub::StreamLogsRaw(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::flwr::proto::StreamLogsResponse>::Create(channel_.get(), rpcmethod_StreamLogs_, context, request);
}

void Exec::Stub::async::StreamLogs(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest* request, ::grpc::ClientReadReactor< ::flwr::proto::StreamLogsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::flwr::proto::StreamLogsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamLogs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::flwr::proto::StreamLogsResponse>* Exec::Stub::AsyncStreamLogsRaw(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::flwr::proto::StreamLogsResponse>::Create(channel_.get(), cq, rpcmethod_StreamLogs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::flwr::proto::StreamLogsResponse>* Exec::Stub::PrepareAsyncStreamLogsRaw(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::flwr::proto::StreamLogsResponse>::Create(channel_.get(), cq, rpcmethod_StreamLogs_, context, request, false, nullptr);
}

Exec::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Exec_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Exec::Service, ::flwr::proto::StartRunRequest, ::flwr::proto::StartRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Exec::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::StartRunRequest* req,
             ::flwr::proto::StartRunResponse* resp) {
               return service->StartRun(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Exec_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Exec::Service, ::flwr::proto::StreamLogsRequest, ::flwr::proto::StreamLogsResponse>(
          [](Exec::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::StreamLogsRequest* req,
             ::grpc::ServerWriter<::flwr::proto::StreamLogsResponse>* writer) {
               return service->StreamLogs(ctx, req, writer);
             }, this)));
}

Exec::Service::~Service() {
}

::grpc::Status Exec::Service::StartRun(::grpc::ServerContext* context, const ::flwr::proto::StartRunRequest* request, ::flwr::proto::StartRunResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Exec::Service::StreamLogs(::grpc::ServerContext* context, const ::flwr::proto::StreamLogsRequest* request, ::grpc::ServerWriter< ::flwr::proto::StreamLogsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flwr
}  // namespace proto


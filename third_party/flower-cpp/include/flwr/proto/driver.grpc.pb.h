// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flwr/proto/driver.proto
// Original file comments:
// Copyright 2022 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_flwr_2fproto_2fdriver_2eproto__INCLUDED
#define GRPC_flwr_2fproto_2fdriver_2eproto__INCLUDED

#include "flwr/proto/driver.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace flwr {
namespace proto {

class Driver final {
 public:
  static constexpr char const* service_full_name() {
    return "flwr.proto.Driver";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Request run_id
    virtual ::grpc::Status CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::flwr::proto::CreateRunResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>> AsyncCreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>>(AsyncCreateRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>> PrepareAsyncCreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>>(PrepareAsyncCreateRunRaw(context, request, cq));
    }
    // Return a set of nodes
    virtual ::grpc::Status GetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::flwr::proto::GetNodesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetNodesResponse>> AsyncGetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetNodesResponse>>(AsyncGetNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetNodesResponse>> PrepareAsyncGetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetNodesResponse>>(PrepareAsyncGetNodesRaw(context, request, cq));
    }
    // Create one or more tasks
    virtual ::grpc::Status PushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::flwr::proto::PushTaskInsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushTaskInsResponse>> AsyncPushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushTaskInsResponse>>(AsyncPushTaskInsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushTaskInsResponse>> PrepareAsyncPushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushTaskInsResponse>>(PrepareAsyncPushTaskInsRaw(context, request, cq));
    }
    // Get task results
    virtual ::grpc::Status PullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::flwr::proto::PullTaskResResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullTaskResResponse>> AsyncPullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullTaskResResponse>>(AsyncPullTaskResRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullTaskResResponse>> PrepareAsyncPullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullTaskResResponse>>(PrepareAsyncPullTaskResRaw(context, request, cq));
    }
    // Get run details
    virtual ::grpc::Status GetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::flwr::proto::GetRunResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunResponse>> AsyncGetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunResponse>>(AsyncGetRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunResponse>> PrepareAsyncGetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunResponse>>(PrepareAsyncGetRunRaw(context, request, cq));
    }
    // Get FAB
    virtual ::grpc::Status GetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::flwr::proto::GetFabResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetFabResponse>> AsyncGetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetFabResponse>>(AsyncGetFabRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetFabResponse>> PrepareAsyncGetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetFabResponse>>(PrepareAsyncGetFabRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Request run_id
      virtual void CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return a set of nodes
      virtual void GetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest* request, ::flwr::proto::GetNodesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest* request, ::flwr::proto::GetNodesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Create one or more tasks
      virtual void PushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest* request, ::flwr::proto::PushTaskInsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest* request, ::flwr::proto::PushTaskInsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get task results
      virtual void PullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest* request, ::flwr::proto::PullTaskResResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest* request, ::flwr::proto::PullTaskResResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get run details
      virtual void GetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest* request, ::flwr::proto::GetRunResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest* request, ::flwr::proto::GetRunResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get FAB
      virtual void GetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest* request, ::flwr::proto::GetFabResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest* request, ::flwr::proto::GetFabResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>* AsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::CreateRunResponse>* PrepareAsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetNodesResponse>* AsyncGetNodesRaw(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetNodesResponse>* PrepareAsyncGetNodesRaw(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushTaskInsResponse>* AsyncPushTaskInsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushTaskInsResponse>* PrepareAsyncPushTaskInsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullTaskResResponse>* AsyncPullTaskResRaw(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullTaskResResponse>* PrepareAsyncPullTaskResRaw(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunResponse>* AsyncGetRunRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetRunResponse>* PrepareAsyncGetRunRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetFabResponse>* AsyncGetFabRaw(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetFabResponse>* PrepareAsyncGetFabRaw(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::flwr::proto::CreateRunResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>> AsyncCreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>>(AsyncCreateRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>> PrepareAsyncCreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>>(PrepareAsyncCreateRunRaw(context, request, cq));
    }
    ::grpc::Status GetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::flwr::proto::GetNodesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetNodesResponse>> AsyncGetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetNodesResponse>>(AsyncGetNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetNodesResponse>> PrepareAsyncGetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetNodesResponse>>(PrepareAsyncGetNodesRaw(context, request, cq));
    }
    ::grpc::Status PushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::flwr::proto::PushTaskInsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushTaskInsResponse>> AsyncPushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushTaskInsResponse>>(AsyncPushTaskInsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushTaskInsResponse>> PrepareAsyncPushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushTaskInsResponse>>(PrepareAsyncPushTaskInsRaw(context, request, cq));
    }
    ::grpc::Status PullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::flwr::proto::PullTaskResResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullTaskResResponse>> AsyncPullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullTaskResResponse>>(AsyncPullTaskResRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullTaskResResponse>> PrepareAsyncPullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullTaskResResponse>>(PrepareAsyncPullTaskResRaw(context, request, cq));
    }
    ::grpc::Status GetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::flwr::proto::GetRunResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunResponse>> AsyncGetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunResponse>>(AsyncGetRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunResponse>> PrepareAsyncGetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunResponse>>(PrepareAsyncGetRunRaw(context, request, cq));
    }
    ::grpc::Status GetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::flwr::proto::GetFabResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetFabResponse>> AsyncGetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetFabResponse>>(AsyncGetFabRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetFabResponse>> PrepareAsyncGetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetFabResponse>>(PrepareAsyncGetFabRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest* request, ::flwr::proto::GetNodesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNodes(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest* request, ::flwr::proto::GetNodesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest* request, ::flwr::proto::PushTaskInsResponse* response, std::function<void(::grpc::Status)>) override;
      void PushTaskIns(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest* request, ::flwr::proto::PushTaskInsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest* request, ::flwr::proto::PullTaskResResponse* response, std::function<void(::grpc::Status)>) override;
      void PullTaskRes(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest* request, ::flwr::proto::PullTaskResResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest* request, ::flwr::proto::GetRunResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRun(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest* request, ::flwr::proto::GetRunResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest* request, ::flwr::proto::GetFabResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFab(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest* request, ::flwr::proto::GetFabResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>* AsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>* PrepareAsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetNodesResponse>* AsyncGetNodesRaw(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetNodesResponse>* PrepareAsyncGetNodesRaw(::grpc::ClientContext* context, const ::flwr::proto::GetNodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushTaskInsResponse>* AsyncPushTaskInsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushTaskInsResponse>* PrepareAsyncPushTaskInsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushTaskInsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullTaskResResponse>* AsyncPullTaskResRaw(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullTaskResResponse>* PrepareAsyncPullTaskResRaw(::grpc::ClientContext* context, const ::flwr::proto::PullTaskResRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunResponse>* AsyncGetRunRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunResponse>* PrepareAsyncGetRunRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetFabResponse>* AsyncGetFabRaw(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetFabResponse>* PrepareAsyncGetFabRaw(::grpc::ClientContext* context, const ::flwr::proto::GetFabRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRun_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNodes_;
    const ::grpc::internal::RpcMethod rpcmethod_PushTaskIns_;
    const ::grpc::internal::RpcMethod rpcmethod_PullTaskRes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRun_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFab_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Request run_id
    virtual ::grpc::Status CreateRun(::grpc::ServerContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response);
    // Return a set of nodes
    virtual ::grpc::Status GetNodes(::grpc::ServerContext* context, const ::flwr::proto::GetNodesRequest* request, ::flwr::proto::GetNodesResponse* response);
    // Create one or more tasks
    virtual ::grpc::Status PushTaskIns(::grpc::ServerContext* context, const ::flwr::proto::PushTaskInsRequest* request, ::flwr::proto::PushTaskInsResponse* response);
    // Get task results
    virtual ::grpc::Status PullTaskRes(::grpc::ServerContext* context, const ::flwr::proto::PullTaskResRequest* request, ::flwr::proto::PullTaskResResponse* response);
    // Get run details
    virtual ::grpc::Status GetRun(::grpc::ServerContext* context, const ::flwr::proto::GetRunRequest* request, ::flwr::proto::GetRunResponse* response);
    // Get FAB
    virtual ::grpc::Status GetFab(::grpc::ServerContext* context, const ::flwr::proto::GetFabRequest* request, ::flwr::proto::GetFabResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRun() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRun(::grpc::ServerContext* context, ::flwr::proto::CreateRunRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::CreateRunResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNodes() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetNodesRequest* /*request*/, ::flwr::proto::GetNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodes(::grpc::ServerContext* context, ::flwr::proto::GetNodesRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::GetNodesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushTaskIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushTaskIns() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PushTaskIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushTaskIns(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushTaskInsRequest* /*request*/, ::flwr::proto::PushTaskInsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushTaskIns(::grpc::ServerContext* context, ::flwr::proto::PushTaskInsRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::PushTaskInsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PullTaskRes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PullTaskRes() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PullTaskRes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullTaskRes(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullTaskResRequest* /*request*/, ::flwr::proto::PullTaskResResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullTaskRes(::grpc::ServerContext* context, ::flwr::proto::PullTaskResRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::PullTaskResResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRun() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunRequest* /*request*/, ::flwr::proto::GetRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRun(::grpc::ServerContext* context, ::flwr::proto::GetRunRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::GetRunResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFab : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFab() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetFab() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFab(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetFabRequest* /*request*/, ::flwr::proto::GetFabResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFab(::grpc::ServerContext* context, ::flwr::proto::GetFabRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::GetFabResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateRun<WithAsyncMethod_GetNodes<WithAsyncMethod_PushTaskIns<WithAsyncMethod_PullTaskRes<WithAsyncMethod_GetRun<WithAsyncMethod_GetFab<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateRun() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response) { return this->CreateRun(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRun(
        ::grpc::MessageAllocator< ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRun(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNodes() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::GetNodesRequest, ::flwr::proto::GetNodesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::GetNodesRequest* request, ::flwr::proto::GetNodesResponse* response) { return this->GetNodes(context, request, response); }));}
    void SetMessageAllocatorFor_GetNodes(
        ::grpc::MessageAllocator< ::flwr::proto::GetNodesRequest, ::flwr::proto::GetNodesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::GetNodesRequest, ::flwr::proto::GetNodesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetNodesRequest* /*request*/, ::flwr::proto::GetNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::GetNodesRequest* /*request*/, ::flwr::proto::GetNodesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushTaskIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushTaskIns() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::PushTaskInsRequest, ::flwr::proto::PushTaskInsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::PushTaskInsRequest* request, ::flwr::proto::PushTaskInsResponse* response) { return this->PushTaskIns(context, request, response); }));}
    void SetMessageAllocatorFor_PushTaskIns(
        ::grpc::MessageAllocator< ::flwr::proto::PushTaskInsRequest, ::flwr::proto::PushTaskInsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::PushTaskInsRequest, ::flwr::proto::PushTaskInsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushTaskIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushTaskIns(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushTaskInsRequest* /*request*/, ::flwr::proto::PushTaskInsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushTaskIns(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::PushTaskInsRequest* /*request*/, ::flwr::proto::PushTaskInsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PullTaskRes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PullTaskRes() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::PullTaskResRequest, ::flwr::proto::PullTaskResResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::PullTaskResRequest* request, ::flwr::proto::PullTaskResResponse* response) { return this->PullTaskRes(context, request, response); }));}
    void SetMessageAllocatorFor_PullTaskRes(
        ::grpc::MessageAllocator< ::flwr::proto::PullTaskResRequest, ::flwr::proto::PullTaskResResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::PullTaskResRequest, ::flwr::proto::PullTaskResResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PullTaskRes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullTaskRes(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullTaskResRequest* /*request*/, ::flwr::proto::PullTaskResResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PullTaskRes(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::PullTaskResRequest* /*request*/, ::flwr::proto::PullTaskResResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRun() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::GetRunRequest, ::flwr::proto::GetRunResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::GetRunRequest* request, ::flwr::proto::GetRunResponse* response) { return this->GetRun(context, request, response); }));}
    void SetMessageAllocatorFor_GetRun(
        ::grpc::MessageAllocator< ::flwr::proto::GetRunRequest, ::flwr::proto::GetRunResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::GetRunRequest, ::flwr::proto::GetRunResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunRequest* /*request*/, ::flwr::proto::GetRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRun(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::GetRunRequest* /*request*/, ::flwr::proto::GetRunResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFab : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFab() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::GetFabRequest, ::flwr::proto::GetFabResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::GetFabRequest* request, ::flwr::proto::GetFabResponse* response) { return this->GetFab(context, request, response); }));}
    void SetMessageAllocatorFor_GetFab(
        ::grpc::MessageAllocator< ::flwr::proto::GetFabRequest, ::flwr::proto::GetFabResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::GetFabRequest, ::flwr::proto::GetFabResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFab() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFab(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetFabRequest* /*request*/, ::flwr::proto::GetFabResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFab(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::GetFabRequest* /*request*/, ::flwr::proto::GetFabResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateRun<WithCallbackMethod_GetNodes<WithCallbackMethod_PushTaskIns<WithCallbackMethod_PullTaskRes<WithCallbackMethod_GetRun<WithCallbackMethod_GetFab<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRun() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNodes() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetNodesRequest* /*request*/, ::flwr::proto::GetNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushTaskIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushTaskIns() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PushTaskIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushTaskIns(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushTaskInsRequest* /*request*/, ::flwr::proto::PushTaskInsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PullTaskRes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PullTaskRes() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PullTaskRes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullTaskRes(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullTaskResRequest* /*request*/, ::flwr::proto::PullTaskResResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRun() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunRequest* /*request*/, ::flwr::proto::GetRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFab : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFab() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetFab() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFab(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetFabRequest* /*request*/, ::flwr::proto::GetFabResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRun() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNodes() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetNodesRequest* /*request*/, ::flwr::proto::GetNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushTaskIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushTaskIns() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PushTaskIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushTaskIns(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushTaskInsRequest* /*request*/, ::flwr::proto::PushTaskInsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushTaskIns(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PullTaskRes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PullTaskRes() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PullTaskRes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullTaskRes(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullTaskResRequest* /*request*/, ::flwr::proto::PullTaskResResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullTaskRes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRun() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunRequest* /*request*/, ::flwr::proto::GetRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFab : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFab() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetFab() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFab(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetFabRequest* /*request*/, ::flwr::proto::GetFabResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFab(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateRun() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRun(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRun(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNodes() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNodes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetNodesRequest* /*request*/, ::flwr::proto::GetNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushTaskIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushTaskIns() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushTaskIns(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushTaskIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushTaskIns(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushTaskInsRequest* /*request*/, ::flwr::proto::PushTaskInsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushTaskIns(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PullTaskRes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PullTaskRes() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PullTaskRes(context, request, response); }));
    }
    ~WithRawCallbackMethod_PullTaskRes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullTaskRes(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullTaskResRequest* /*request*/, ::flwr::proto::PullTaskResResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PullTaskRes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRun() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRun(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunRequest* /*request*/, ::flwr::proto::GetRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRun(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFab : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFab() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFab(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFab() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFab(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetFabRequest* /*request*/, ::flwr::proto::GetFabResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFab(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRun() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse>* streamer) {
                       return this->StreamedCreateRun(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::CreateRunRequest* /*request*/, ::flwr::proto::CreateRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRun(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::CreateRunRequest,::flwr::proto::CreateRunResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNodes() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::GetNodesRequest, ::flwr::proto::GetNodesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::GetNodesRequest, ::flwr::proto::GetNodesResponse>* streamer) {
                       return this->StreamedGetNodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNodes(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetNodesRequest* /*request*/, ::flwr::proto::GetNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::GetNodesRequest,::flwr::proto::GetNodesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushTaskIns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushTaskIns() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::PushTaskInsRequest, ::flwr::proto::PushTaskInsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::PushTaskInsRequest, ::flwr::proto::PushTaskInsResponse>* streamer) {
                       return this->StreamedPushTaskIns(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushTaskIns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushTaskIns(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushTaskInsRequest* /*request*/, ::flwr::proto::PushTaskInsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushTaskIns(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::PushTaskInsRequest,::flwr::proto::PushTaskInsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PullTaskRes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PullTaskRes() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::PullTaskResRequest, ::flwr::proto::PullTaskResResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::PullTaskResRequest, ::flwr::proto::PullTaskResResponse>* streamer) {
                       return this->StreamedPullTaskRes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PullTaskRes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PullTaskRes(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullTaskResRequest* /*request*/, ::flwr::proto::PullTaskResResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPullTaskRes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::PullTaskResRequest,::flwr::proto::PullTaskResResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRun() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::GetRunRequest, ::flwr::proto::GetRunResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::GetRunRequest, ::flwr::proto::GetRunResponse>* streamer) {
                       return this->StreamedGetRun(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetRunRequest* /*request*/, ::flwr::proto::GetRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRun(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::GetRunRequest,::flwr::proto::GetRunResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFab : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFab() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::GetFabRequest, ::flwr::proto::GetFabResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::GetFabRequest, ::flwr::proto::GetFabResponse>* streamer) {
                       return this->StreamedGetFab(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFab() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFab(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetFabRequest* /*request*/, ::flwr::proto::GetFabResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFab(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::GetFabRequest,::flwr::proto::GetFabResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateRun<WithStreamedUnaryMethod_GetNodes<WithStreamedUnaryMethod_PushTaskIns<WithStreamedUnaryMethod_PullTaskRes<WithStreamedUnaryMethod_GetRun<WithStreamedUnaryMethod_GetFab<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateRun<WithStreamedUnaryMethod_GetNodes<WithStreamedUnaryMethod_PushTaskIns<WithStreamedUnaryMethod_PullTaskRes<WithStreamedUnaryMethod_GetRun<WithStreamedUnaryMethod_GetFab<Service > > > > > > StreamedService;
};

}  // namespace proto
}  // namespace flwr


#endif  // GRPC_flwr_2fproto_2fdriver_2eproto__INCLUDED

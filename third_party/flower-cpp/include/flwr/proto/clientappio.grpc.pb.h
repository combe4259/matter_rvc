// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flwr/proto/clientappio.proto
// Original file comments:
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_flwr_2fproto_2fclientappio_2eproto__INCLUDED
#define GRPC_flwr_2fproto_2fclientappio_2eproto__INCLUDED

#include "flwr/proto/clientappio.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace flwr {
namespace proto {

class ClientAppIo final {
 public:
  static constexpr char const* service_full_name() {
    return "flwr.proto.ClientAppIo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get token
    virtual ::grpc::Status GetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::flwr::proto::GetTokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetTokenResponse>> AsyncGetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetTokenResponse>>(AsyncGetTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetTokenResponse>> PrepareAsyncGetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetTokenResponse>>(PrepareAsyncGetTokenRaw(context, request, cq));
    }
    // Get Message, Context, and Run
    virtual ::grpc::Status PullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::flwr::proto::PullClientAppInputsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullClientAppInputsResponse>> AsyncPullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullClientAppInputsResponse>>(AsyncPullClientAppInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullClientAppInputsResponse>> PrepareAsyncPullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullClientAppInputsResponse>>(PrepareAsyncPullClientAppInputsRaw(context, request, cq));
    }
    // Send updated Message and Context
    virtual ::grpc::Status PushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::flwr::proto::PushClientAppOutputsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushClientAppOutputsResponse>> AsyncPushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushClientAppOutputsResponse>>(AsyncPushClientAppOutputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushClientAppOutputsResponse>> PrepareAsyncPushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushClientAppOutputsResponse>>(PrepareAsyncPushClientAppOutputsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get token
      virtual void GetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest* request, ::flwr::proto::GetTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest* request, ::flwr::proto::GetTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get Message, Context, and Run
      virtual void PullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest* request, ::flwr::proto::PullClientAppInputsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest* request, ::flwr::proto::PullClientAppInputsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Send updated Message and Context
      virtual void PushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest* request, ::flwr::proto::PushClientAppOutputsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest* request, ::flwr::proto::PushClientAppOutputsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetTokenResponse>* AsyncGetTokenRaw(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::GetTokenResponse>* PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullClientAppInputsResponse>* AsyncPullClientAppInputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PullClientAppInputsResponse>* PrepareAsyncPullClientAppInputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushClientAppOutputsResponse>* AsyncPushClientAppOutputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::PushClientAppOutputsResponse>* PrepareAsyncPushClientAppOutputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::flwr::proto::GetTokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetTokenResponse>> AsyncGetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetTokenResponse>>(AsyncGetTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetTokenResponse>> PrepareAsyncGetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetTokenResponse>>(PrepareAsyncGetTokenRaw(context, request, cq));
    }
    ::grpc::Status PullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::flwr::proto::PullClientAppInputsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullClientAppInputsResponse>> AsyncPullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullClientAppInputsResponse>>(AsyncPullClientAppInputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullClientAppInputsResponse>> PrepareAsyncPullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullClientAppInputsResponse>>(PrepareAsyncPullClientAppInputsRaw(context, request, cq));
    }
    ::grpc::Status PushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::flwr::proto::PushClientAppOutputsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushClientAppOutputsResponse>> AsyncPushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushClientAppOutputsResponse>>(AsyncPushClientAppOutputsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushClientAppOutputsResponse>> PrepareAsyncPushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushClientAppOutputsResponse>>(PrepareAsyncPushClientAppOutputsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest* request, ::flwr::proto::GetTokenResponse* response, std::function<void(::grpc::Status)>) override;
      void GetToken(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest* request, ::flwr::proto::GetTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest* request, ::flwr::proto::PullClientAppInputsResponse* response, std::function<void(::grpc::Status)>) override;
      void PullClientAppInputs(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest* request, ::flwr::proto::PullClientAppInputsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest* request, ::flwr::proto::PushClientAppOutputsResponse* response, std::function<void(::grpc::Status)>) override;
      void PushClientAppOutputs(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest* request, ::flwr::proto::PushClientAppOutputsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetTokenResponse>* AsyncGetTokenRaw(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::GetTokenResponse>* PrepareAsyncGetTokenRaw(::grpc::ClientContext* context, const ::flwr::proto::GetTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullClientAppInputsResponse>* AsyncPullClientAppInputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::PullClientAppInputsResponse>* PrepareAsyncPullClientAppInputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PullClientAppInputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushClientAppOutputsResponse>* AsyncPushClientAppOutputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::PushClientAppOutputsResponse>* PrepareAsyncPushClientAppOutputsRaw(::grpc::ClientContext* context, const ::flwr::proto::PushClientAppOutputsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetToken_;
    const ::grpc::internal::RpcMethod rpcmethod_PullClientAppInputs_;
    const ::grpc::internal::RpcMethod rpcmethod_PushClientAppOutputs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get token
    virtual ::grpc::Status GetToken(::grpc::ServerContext* context, const ::flwr::proto::GetTokenRequest* request, ::flwr::proto::GetTokenResponse* response);
    // Get Message, Context, and Run
    virtual ::grpc::Status PullClientAppInputs(::grpc::ServerContext* context, const ::flwr::proto::PullClientAppInputsRequest* request, ::flwr::proto::PullClientAppInputsResponse* response);
    // Send updated Message and Context
    virtual ::grpc::Status PushClientAppOutputs(::grpc::ServerContext* context, const ::flwr::proto::PushClientAppOutputsRequest* request, ::flwr::proto::PushClientAppOutputsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetToken() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetTokenRequest* /*request*/, ::flwr::proto::GetTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetToken(::grpc::ServerContext* context, ::flwr::proto::GetTokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::GetTokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PullClientAppInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PullClientAppInputs() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PullClientAppInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullClientAppInputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullClientAppInputsRequest* /*request*/, ::flwr::proto::PullClientAppInputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullClientAppInputs(::grpc::ServerContext* context, ::flwr::proto::PullClientAppInputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::PullClientAppInputsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushClientAppOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushClientAppOutputs() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PushClientAppOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushClientAppOutputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushClientAppOutputsRequest* /*request*/, ::flwr::proto::PushClientAppOutputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushClientAppOutputs(::grpc::ServerContext* context, ::flwr::proto::PushClientAppOutputsRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::PushClientAppOutputsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetToken<WithAsyncMethod_PullClientAppInputs<WithAsyncMethod_PushClientAppOutputs<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetToken() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::GetTokenRequest, ::flwr::proto::GetTokenResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::GetTokenRequest* request, ::flwr::proto::GetTokenResponse* response) { return this->GetToken(context, request, response); }));}
    void SetMessageAllocatorFor_GetToken(
        ::grpc::MessageAllocator< ::flwr::proto::GetTokenRequest, ::flwr::proto::GetTokenResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::GetTokenRequest, ::flwr::proto::GetTokenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetTokenRequest* /*request*/, ::flwr::proto::GetTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetToken(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::GetTokenRequest* /*request*/, ::flwr::proto::GetTokenResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PullClientAppInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PullClientAppInputs() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::PullClientAppInputsRequest, ::flwr::proto::PullClientAppInputsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::PullClientAppInputsRequest* request, ::flwr::proto::PullClientAppInputsResponse* response) { return this->PullClientAppInputs(context, request, response); }));}
    void SetMessageAllocatorFor_PullClientAppInputs(
        ::grpc::MessageAllocator< ::flwr::proto::PullClientAppInputsRequest, ::flwr::proto::PullClientAppInputsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::PullClientAppInputsRequest, ::flwr::proto::PullClientAppInputsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PullClientAppInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullClientAppInputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullClientAppInputsRequest* /*request*/, ::flwr::proto::PullClientAppInputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PullClientAppInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::PullClientAppInputsRequest* /*request*/, ::flwr::proto::PullClientAppInputsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushClientAppOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushClientAppOutputs() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::PushClientAppOutputsRequest, ::flwr::proto::PushClientAppOutputsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::PushClientAppOutputsRequest* request, ::flwr::proto::PushClientAppOutputsResponse* response) { return this->PushClientAppOutputs(context, request, response); }));}
    void SetMessageAllocatorFor_PushClientAppOutputs(
        ::grpc::MessageAllocator< ::flwr::proto::PushClientAppOutputsRequest, ::flwr::proto::PushClientAppOutputsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::PushClientAppOutputsRequest, ::flwr::proto::PushClientAppOutputsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushClientAppOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushClientAppOutputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushClientAppOutputsRequest* /*request*/, ::flwr::proto::PushClientAppOutputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushClientAppOutputs(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::PushClientAppOutputsRequest* /*request*/, ::flwr::proto::PushClientAppOutputsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetToken<WithCallbackMethod_PullClientAppInputs<WithCallbackMethod_PushClientAppOutputs<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetToken() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetTokenRequest* /*request*/, ::flwr::proto::GetTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PullClientAppInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PullClientAppInputs() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PullClientAppInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullClientAppInputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullClientAppInputsRequest* /*request*/, ::flwr::proto::PullClientAppInputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushClientAppOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushClientAppOutputs() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PushClientAppOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushClientAppOutputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushClientAppOutputsRequest* /*request*/, ::flwr::proto::PushClientAppOutputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetToken() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetTokenRequest* /*request*/, ::flwr::proto::GetTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PullClientAppInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PullClientAppInputs() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PullClientAppInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullClientAppInputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullClientAppInputsRequest* /*request*/, ::flwr::proto::PullClientAppInputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullClientAppInputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushClientAppOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushClientAppOutputs() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PushClientAppOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushClientAppOutputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushClientAppOutputsRequest* /*request*/, ::flwr::proto::PushClientAppOutputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushClientAppOutputs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetToken() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetToken(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetTokenRequest* /*request*/, ::flwr::proto::GetTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PullClientAppInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PullClientAppInputs() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PullClientAppInputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_PullClientAppInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullClientAppInputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullClientAppInputsRequest* /*request*/, ::flwr::proto::PullClientAppInputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PullClientAppInputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushClientAppOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushClientAppOutputs() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushClientAppOutputs(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushClientAppOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushClientAppOutputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushClientAppOutputsRequest* /*request*/, ::flwr::proto::PushClientAppOutputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushClientAppOutputs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetToken() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::GetTokenRequest, ::flwr::proto::GetTokenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::GetTokenRequest, ::flwr::proto::GetTokenResponse>* streamer) {
                       return this->StreamedGetToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetToken(::grpc::ServerContext* /*context*/, const ::flwr::proto::GetTokenRequest* /*request*/, ::flwr::proto::GetTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::GetTokenRequest,::flwr::proto::GetTokenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PullClientAppInputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PullClientAppInputs() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::PullClientAppInputsRequest, ::flwr::proto::PullClientAppInputsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::PullClientAppInputsRequest, ::flwr::proto::PullClientAppInputsResponse>* streamer) {
                       return this->StreamedPullClientAppInputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PullClientAppInputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PullClientAppInputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PullClientAppInputsRequest* /*request*/, ::flwr::proto::PullClientAppInputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPullClientAppInputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::PullClientAppInputsRequest,::flwr::proto::PullClientAppInputsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushClientAppOutputs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushClientAppOutputs() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::PushClientAppOutputsRequest, ::flwr::proto::PushClientAppOutputsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::PushClientAppOutputsRequest, ::flwr::proto::PushClientAppOutputsResponse>* streamer) {
                       return this->StreamedPushClientAppOutputs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushClientAppOutputs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushClientAppOutputs(::grpc::ServerContext* /*context*/, const ::flwr::proto::PushClientAppOutputsRequest* /*request*/, ::flwr::proto::PushClientAppOutputsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushClientAppOutputs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::PushClientAppOutputsRequest,::flwr::proto::PushClientAppOutputsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetToken<WithStreamedUnaryMethod_PullClientAppInputs<WithStreamedUnaryMethod_PushClientAppOutputs<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetToken<WithStreamedUnaryMethod_PullClientAppInputs<WithStreamedUnaryMethod_PushClientAppOutputs<Service > > > StreamedService;
};

}  // namespace proto
}  // namespace flwr


#endif  // GRPC_flwr_2fproto_2fclientappio_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/exec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fexec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fexec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "flwr/proto/fab.pb.h"
#include "flwr/proto/transport.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flwr_2fproto_2fexec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flwr_2fproto_2fexec_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2fexec_2eproto;
namespace flwr {
namespace proto {
class StartRunRequest;
struct StartRunRequestDefaultTypeInternal;
extern StartRunRequestDefaultTypeInternal _StartRunRequest_default_instance_;
class StartRunRequest_FederationConfigEntry_DoNotUse;
struct StartRunRequest_FederationConfigEntry_DoNotUseDefaultTypeInternal;
extern StartRunRequest_FederationConfigEntry_DoNotUseDefaultTypeInternal _StartRunRequest_FederationConfigEntry_DoNotUse_default_instance_;
class StartRunRequest_OverrideConfigEntry_DoNotUse;
struct StartRunRequest_OverrideConfigEntry_DoNotUseDefaultTypeInternal;
extern StartRunRequest_OverrideConfigEntry_DoNotUseDefaultTypeInternal _StartRunRequest_OverrideConfigEntry_DoNotUse_default_instance_;
class StartRunResponse;
struct StartRunResponseDefaultTypeInternal;
extern StartRunResponseDefaultTypeInternal _StartRunResponse_default_instance_;
class StreamLogsRequest;
struct StreamLogsRequestDefaultTypeInternal;
extern StreamLogsRequestDefaultTypeInternal _StreamLogsRequest_default_instance_;
class StreamLogsResponse;
struct StreamLogsResponseDefaultTypeInternal;
extern StreamLogsResponseDefaultTypeInternal _StreamLogsResponse_default_instance_;
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> ::flwr::proto::StartRunRequest* Arena::CreateMaybeMessage<::flwr::proto::StartRunRequest>(Arena*);
template<> ::flwr::proto::StartRunRequest_FederationConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::StartRunRequest_FederationConfigEntry_DoNotUse>(Arena*);
template<> ::flwr::proto::StartRunRequest_OverrideConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::StartRunRequest_OverrideConfigEntry_DoNotUse>(Arena*);
template<> ::flwr::proto::StartRunResponse* Arena::CreateMaybeMessage<::flwr::proto::StartRunResponse>(Arena*);
template<> ::flwr::proto::StreamLogsRequest* Arena::CreateMaybeMessage<::flwr::proto::StreamLogsRequest>(Arena*);
template<> ::flwr::proto::StreamLogsResponse* Arena::CreateMaybeMessage<::flwr::proto::StreamLogsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flwr {
namespace proto {

// ===================================================================

class StartRunRequest_OverrideConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StartRunRequest_OverrideConfigEntry_DoNotUse, 
    std::string, ::flwr::proto::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StartRunRequest_OverrideConfigEntry_DoNotUse, 
    std::string, ::flwr::proto::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  StartRunRequest_OverrideConfigEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StartRunRequest_OverrideConfigEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StartRunRequest_OverrideConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StartRunRequest_OverrideConfigEntry_DoNotUse& other);
  static const StartRunRequest_OverrideConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StartRunRequest_OverrideConfigEntry_DoNotUse*>(&_StartRunRequest_OverrideConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.StartRunRequest.OverrideConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_flwr_2fproto_2fexec_2eproto;
};

// -------------------------------------------------------------------

class StartRunRequest_FederationConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StartRunRequest_FederationConfigEntry_DoNotUse, 
    std::string, ::flwr::proto::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StartRunRequest_FederationConfigEntry_DoNotUse, 
    std::string, ::flwr::proto::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  StartRunRequest_FederationConfigEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StartRunRequest_FederationConfigEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StartRunRequest_FederationConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StartRunRequest_FederationConfigEntry_DoNotUse& other);
  static const StartRunRequest_FederationConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StartRunRequest_FederationConfigEntry_DoNotUse*>(&_StartRunRequest_FederationConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.StartRunRequest.FederationConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_flwr_2fproto_2fexec_2eproto;
};

// -------------------------------------------------------------------

class StartRunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.StartRunRequest) */ {
 public:
  inline StartRunRequest() : StartRunRequest(nullptr) {}
  ~StartRunRequest() override;
  explicit PROTOBUF_CONSTEXPR StartRunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRunRequest(const StartRunRequest& from);
  StartRunRequest(StartRunRequest&& from) noexcept
    : StartRunRequest() {
    *this = ::std::move(from);
  }

  inline StartRunRequest& operator=(const StartRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRunRequest& operator=(StartRunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRunRequest* internal_default_instance() {
    return reinterpret_cast<const StartRunRequest*>(
               &_StartRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartRunRequest& a, StartRunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartRunRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.StartRunRequest";
  }
  protected:
  explicit StartRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOverrideConfigFieldNumber = 2,
    kFederationConfigFieldNumber = 3,
    kFabFieldNumber = 1,
  };
  // map<string, .flwr.proto.Scalar> override_config = 2;
  int override_config_size() const;
  private:
  int _internal_override_config_size() const;
  public:
  void clear_override_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
      _internal_override_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
      _internal_mutable_override_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
      override_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
      mutable_override_config();

  // map<string, .flwr.proto.Scalar> federation_config = 3;
  int federation_config_size() const;
  private:
  int _internal_federation_config_size() const;
  public:
  void clear_federation_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
      _internal_federation_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
      _internal_mutable_federation_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
      federation_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
      mutable_federation_config();

  // .flwr.proto.Fab fab = 1;
  bool has_fab() const;
  private:
  bool _internal_has_fab() const;
  public:
  void clear_fab();
  const ::flwr::proto::Fab& fab() const;
  PROTOBUF_NODISCARD ::flwr::proto::Fab* release_fab();
  ::flwr::proto::Fab* mutable_fab();
  void set_allocated_fab(::flwr::proto::Fab* fab);
  private:
  const ::flwr::proto::Fab& _internal_fab() const;
  ::flwr::proto::Fab* _internal_mutable_fab();
  public:
  void unsafe_arena_set_allocated_fab(
      ::flwr::proto::Fab* fab);
  ::flwr::proto::Fab* unsafe_arena_release_fab();

  // @@protoc_insertion_point(class_scope:flwr.proto.StartRunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StartRunRequest_OverrideConfigEntry_DoNotUse,
      std::string, ::flwr::proto::Scalar,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> override_config_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StartRunRequest_FederationConfigEntry_DoNotUse,
      std::string, ::flwr::proto::Scalar,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> federation_config_;
  ::flwr::proto::Fab* fab_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fexec_2eproto;
};
// -------------------------------------------------------------------

class StartRunResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.StartRunResponse) */ {
 public:
  inline StartRunResponse() : StartRunResponse(nullptr) {}
  ~StartRunResponse() override;
  explicit PROTOBUF_CONSTEXPR StartRunResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRunResponse(const StartRunResponse& from);
  StartRunResponse(StartRunResponse&& from) noexcept
    : StartRunResponse() {
    *this = ::std::move(from);
  }

  inline StartRunResponse& operator=(const StartRunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRunResponse& operator=(StartRunResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRunResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRunResponse* internal_default_instance() {
    return reinterpret_cast<const StartRunResponse*>(
               &_StartRunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartRunResponse& a, StartRunResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRunResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRunResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRunResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRunResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartRunResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRunResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.StartRunResponse";
  }
  protected:
  explicit StartRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
  };
  // uint64 run_id = 1;
  void clear_run_id();
  uint64_t run_id() const;
  void set_run_id(uint64_t value);
  private:
  uint64_t _internal_run_id() const;
  void _internal_set_run_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.StartRunResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fexec_2eproto;
};
// -------------------------------------------------------------------

class StreamLogsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.StreamLogsRequest) */ {
 public:
  inline StreamLogsRequest() : StreamLogsRequest(nullptr) {}
  ~StreamLogsRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamLogsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamLogsRequest(const StreamLogsRequest& from);
  StreamLogsRequest(StreamLogsRequest&& from) noexcept
    : StreamLogsRequest() {
    *this = ::std::move(from);
  }

  inline StreamLogsRequest& operator=(const StreamLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamLogsRequest& operator=(StreamLogsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamLogsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamLogsRequest* internal_default_instance() {
    return reinterpret_cast<const StreamLogsRequest*>(
               &_StreamLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamLogsRequest& a, StreamLogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamLogsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamLogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamLogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamLogsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamLogsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamLogsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamLogsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.StreamLogsRequest";
  }
  protected:
  explicit StreamLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunIdFieldNumber = 1,
  };
  // uint64 run_id = 1;
  void clear_run_id();
  uint64_t run_id() const;
  void set_run_id(uint64_t value);
  private:
  uint64_t _internal_run_id() const;
  void _internal_set_run_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.StreamLogsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t run_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fexec_2eproto;
};
// -------------------------------------------------------------------

class StreamLogsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.StreamLogsResponse) */ {
 public:
  inline StreamLogsResponse() : StreamLogsResponse(nullptr) {}
  ~StreamLogsResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamLogsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamLogsResponse(const StreamLogsResponse& from);
  StreamLogsResponse(StreamLogsResponse&& from) noexcept
    : StreamLogsResponse() {
    *this = ::std::move(from);
  }

  inline StreamLogsResponse& operator=(const StreamLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamLogsResponse& operator=(StreamLogsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamLogsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamLogsResponse* internal_default_instance() {
    return reinterpret_cast<const StreamLogsResponse*>(
               &_StreamLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamLogsResponse& a, StreamLogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamLogsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamLogsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamLogsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamLogsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamLogsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamLogsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamLogsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.StreamLogsResponse";
  }
  protected:
  explicit StreamLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogOutputFieldNumber = 1,
  };
  // string log_output = 1;
  void clear_log_output();
  const std::string& log_output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_output();
  PROTOBUF_NODISCARD std::string* release_log_output();
  void set_allocated_log_output(std::string* log_output);
  private:
  const std::string& _internal_log_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_output(const std::string& value);
  std::string* _internal_mutable_log_output();
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.StreamLogsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fexec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StartRunRequest

// .flwr.proto.Fab fab = 1;
inline bool StartRunRequest::_internal_has_fab() const {
  return this != internal_default_instance() && fab_ != nullptr;
}
inline bool StartRunRequest::has_fab() const {
  return _internal_has_fab();
}
inline const ::flwr::proto::Fab& StartRunRequest::_internal_fab() const {
  const ::flwr::proto::Fab* p = fab_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Fab&>(
      ::flwr::proto::_Fab_default_instance_);
}
inline const ::flwr::proto::Fab& StartRunRequest::fab() const {
  // @@protoc_insertion_point(field_get:flwr.proto.StartRunRequest.fab)
  return _internal_fab();
}
inline void StartRunRequest::unsafe_arena_set_allocated_fab(
    ::flwr::proto::Fab* fab) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fab_);
  }
  fab_ = fab;
  if (fab) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.StartRunRequest.fab)
}
inline ::flwr::proto::Fab* StartRunRequest::release_fab() {
  
  ::flwr::proto::Fab* temp = fab_;
  fab_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Fab* StartRunRequest::unsafe_arena_release_fab() {
  // @@protoc_insertion_point(field_release:flwr.proto.StartRunRequest.fab)
  
  ::flwr::proto::Fab* temp = fab_;
  fab_ = nullptr;
  return temp;
}
inline ::flwr::proto::Fab* StartRunRequest::_internal_mutable_fab() {
  
  if (fab_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Fab>(GetArenaForAllocation());
    fab_ = p;
  }
  return fab_;
}
inline ::flwr::proto::Fab* StartRunRequest::mutable_fab() {
  ::flwr::proto::Fab* _msg = _internal_mutable_fab();
  // @@protoc_insertion_point(field_mutable:flwr.proto.StartRunRequest.fab)
  return _msg;
}
inline void StartRunRequest::set_allocated_fab(::flwr::proto::Fab* fab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fab_);
  }
  if (fab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fab));
    if (message_arena != submessage_arena) {
      fab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fab, submessage_arena);
    }
    
  } else {
    
  }
  fab_ = fab;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.StartRunRequest.fab)
}

// map<string, .flwr.proto.Scalar> override_config = 2;
inline int StartRunRequest::_internal_override_config_size() const {
  return override_config_.size();
}
inline int StartRunRequest::override_config_size() const {
  return _internal_override_config_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
StartRunRequest::_internal_override_config() const {
  return override_config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
StartRunRequest::override_config() const {
  // @@protoc_insertion_point(field_map:flwr.proto.StartRunRequest.override_config)
  return _internal_override_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
StartRunRequest::_internal_mutable_override_config() {
  return override_config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
StartRunRequest::mutable_override_config() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.StartRunRequest.override_config)
  return _internal_mutable_override_config();
}

// map<string, .flwr.proto.Scalar> federation_config = 3;
inline int StartRunRequest::_internal_federation_config_size() const {
  return federation_config_.size();
}
inline int StartRunRequest::federation_config_size() const {
  return _internal_federation_config_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
StartRunRequest::_internal_federation_config() const {
  return federation_config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >&
StartRunRequest::federation_config() const {
  // @@protoc_insertion_point(field_map:flwr.proto.StartRunRequest.federation_config)
  return _internal_federation_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
StartRunRequest::_internal_mutable_federation_config() {
  return federation_config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >*
StartRunRequest::mutable_federation_config() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.StartRunRequest.federation_config)
  return _internal_mutable_federation_config();
}

// -------------------------------------------------------------------

// StartRunResponse

// uint64 run_id = 1;
inline void StartRunResponse::clear_run_id() {
  run_id_ = uint64_t{0u};
}
inline uint64_t StartRunResponse::_internal_run_id() const {
  return run_id_;
}
inline uint64_t StartRunResponse::run_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.StartRunResponse.run_id)
  return _internal_run_id();
}
inline void StartRunResponse::_internal_set_run_id(uint64_t value) {
  
  run_id_ = value;
}
inline void StartRunResponse::set_run_id(uint64_t value) {
  _internal_set_run_id(value);
  // @@protoc_insertion_point(field_set:flwr.proto.StartRunResponse.run_id)
}

// -------------------------------------------------------------------

// StreamLogsRequest

// uint64 run_id = 1;
inline void StreamLogsRequest::clear_run_id() {
  run_id_ = uint64_t{0u};
}
inline uint64_t StreamLogsRequest::_internal_run_id() const {
  return run_id_;
}
inline uint64_t StreamLogsRequest::run_id() const {
  // @@protoc_insertion_point(field_get:flwr.proto.StreamLogsRequest.run_id)
  return _internal_run_id();
}
inline void StreamLogsRequest::_internal_set_run_id(uint64_t value) {
  
  run_id_ = value;
}
inline void StreamLogsRequest::set_run_id(uint64_t value) {
  _internal_set_run_id(value);
  // @@protoc_insertion_point(field_set:flwr.proto.StreamLogsRequest.run_id)
}

// -------------------------------------------------------------------

// StreamLogsResponse

// string log_output = 1;
inline void StreamLogsResponse::clear_log_output() {
  log_output_.ClearToEmpty();
}
inline const std::string& StreamLogsResponse::log_output() const {
  // @@protoc_insertion_point(field_get:flwr.proto.StreamLogsResponse.log_output)
  return _internal_log_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamLogsResponse::set_log_output(ArgT0&& arg0, ArgT... args) {
 
 log_output_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.StreamLogsResponse.log_output)
}
inline std::string* StreamLogsResponse::mutable_log_output() {
  std::string* _s = _internal_mutable_log_output();
  // @@protoc_insertion_point(field_mutable:flwr.proto.StreamLogsResponse.log_output)
  return _s;
}
inline const std::string& StreamLogsResponse::_internal_log_output() const {
  return log_output_.Get();
}
inline void StreamLogsResponse::_internal_set_log_output(const std::string& value) {
  
  log_output_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamLogsResponse::_internal_mutable_log_output() {
  
  return log_output_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamLogsResponse::release_log_output() {
  // @@protoc_insertion_point(field_release:flwr.proto.StreamLogsResponse.log_output)
  return log_output_.Release();
}
inline void StreamLogsResponse::set_allocated_log_output(std::string* log_output) {
  if (log_output != nullptr) {
    
  } else {
    
  }
  log_output_.SetAllocated(log_output, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (log_output_.IsDefault()) {
    log_output_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.StreamLogsResponse.log_output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flwr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fexec_2eproto

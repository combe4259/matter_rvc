// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/clientappio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fclientappio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fclientappio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flwr/proto/fab.pb.h"
#include "flwr/proto/run.pb.h"
#include "flwr/proto/message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flwr_2fproto_2fclientappio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flwr_2fproto_2fclientappio_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2fclientappio_2eproto;
namespace flwr {
namespace proto {
class ClientAppOutputStatus;
struct ClientAppOutputStatusDefaultTypeInternal;
extern ClientAppOutputStatusDefaultTypeInternal _ClientAppOutputStatus_default_instance_;
class GetTokenRequest;
struct GetTokenRequestDefaultTypeInternal;
extern GetTokenRequestDefaultTypeInternal _GetTokenRequest_default_instance_;
class GetTokenResponse;
struct GetTokenResponseDefaultTypeInternal;
extern GetTokenResponseDefaultTypeInternal _GetTokenResponse_default_instance_;
class PullClientAppInputsRequest;
struct PullClientAppInputsRequestDefaultTypeInternal;
extern PullClientAppInputsRequestDefaultTypeInternal _PullClientAppInputsRequest_default_instance_;
class PullClientAppInputsResponse;
struct PullClientAppInputsResponseDefaultTypeInternal;
extern PullClientAppInputsResponseDefaultTypeInternal _PullClientAppInputsResponse_default_instance_;
class PushClientAppOutputsRequest;
struct PushClientAppOutputsRequestDefaultTypeInternal;
extern PushClientAppOutputsRequestDefaultTypeInternal _PushClientAppOutputsRequest_default_instance_;
class PushClientAppOutputsResponse;
struct PushClientAppOutputsResponseDefaultTypeInternal;
extern PushClientAppOutputsResponseDefaultTypeInternal _PushClientAppOutputsResponse_default_instance_;
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> ::flwr::proto::ClientAppOutputStatus* Arena::CreateMaybeMessage<::flwr::proto::ClientAppOutputStatus>(Arena*);
template<> ::flwr::proto::GetTokenRequest* Arena::CreateMaybeMessage<::flwr::proto::GetTokenRequest>(Arena*);
template<> ::flwr::proto::GetTokenResponse* Arena::CreateMaybeMessage<::flwr::proto::GetTokenResponse>(Arena*);
template<> ::flwr::proto::PullClientAppInputsRequest* Arena::CreateMaybeMessage<::flwr::proto::PullClientAppInputsRequest>(Arena*);
template<> ::flwr::proto::PullClientAppInputsResponse* Arena::CreateMaybeMessage<::flwr::proto::PullClientAppInputsResponse>(Arena*);
template<> ::flwr::proto::PushClientAppOutputsRequest* Arena::CreateMaybeMessage<::flwr::proto::PushClientAppOutputsRequest>(Arena*);
template<> ::flwr::proto::PushClientAppOutputsResponse* Arena::CreateMaybeMessage<::flwr::proto::PushClientAppOutputsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flwr {
namespace proto {

enum ClientAppOutputCode : int {
  SUCCESS = 0,
  DEADLINE_EXCEEDED = 1,
  UNKNOWN_ERROR = 2,
  ClientAppOutputCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ClientAppOutputCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ClientAppOutputCode_IsValid(int value);
constexpr ClientAppOutputCode ClientAppOutputCode_MIN = SUCCESS;
constexpr ClientAppOutputCode ClientAppOutputCode_MAX = UNKNOWN_ERROR;
constexpr int ClientAppOutputCode_ARRAYSIZE = ClientAppOutputCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientAppOutputCode_descriptor();
template<typename T>
inline const std::string& ClientAppOutputCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientAppOutputCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientAppOutputCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientAppOutputCode_descriptor(), enum_t_value);
}
inline bool ClientAppOutputCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientAppOutputCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientAppOutputCode>(
    ClientAppOutputCode_descriptor(), name, value);
}
// ===================================================================

class ClientAppOutputStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.ClientAppOutputStatus) */ {
 public:
  inline ClientAppOutputStatus() : ClientAppOutputStatus(nullptr) {}
  ~ClientAppOutputStatus() override;
  explicit PROTOBUF_CONSTEXPR ClientAppOutputStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientAppOutputStatus(const ClientAppOutputStatus& from);
  ClientAppOutputStatus(ClientAppOutputStatus&& from) noexcept
    : ClientAppOutputStatus() {
    *this = ::std::move(from);
  }

  inline ClientAppOutputStatus& operator=(const ClientAppOutputStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientAppOutputStatus& operator=(ClientAppOutputStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientAppOutputStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientAppOutputStatus* internal_default_instance() {
    return reinterpret_cast<const ClientAppOutputStatus*>(
               &_ClientAppOutputStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientAppOutputStatus& a, ClientAppOutputStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientAppOutputStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientAppOutputStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientAppOutputStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientAppOutputStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientAppOutputStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClientAppOutputStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientAppOutputStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.ClientAppOutputStatus";
  }
  protected:
  explicit ClientAppOutputStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .flwr.proto.ClientAppOutputCode code = 1;
  void clear_code();
  ::flwr::proto::ClientAppOutputCode code() const;
  void set_code(::flwr::proto::ClientAppOutputCode value);
  private:
  ::flwr::proto::ClientAppOutputCode _internal_code() const;
  void _internal_set_code(::flwr::proto::ClientAppOutputCode value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.ClientAppOutputStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fclientappio_2eproto;
};
// -------------------------------------------------------------------

class GetTokenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flwr.proto.GetTokenRequest) */ {
 public:
  inline GetTokenRequest() : GetTokenRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetTokenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTokenRequest(const GetTokenRequest& from);
  GetTokenRequest(GetTokenRequest&& from) noexcept
    : GetTokenRequest() {
    *this = ::std::move(from);
  }

  inline GetTokenRequest& operator=(const GetTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTokenRequest& operator=(GetTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GetTokenRequest*>(
               &_GetTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetTokenRequest& a, GetTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTokenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTokenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetTokenRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetTokenRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.GetTokenRequest";
  }
  protected:
  explicit GetTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flwr.proto.GetTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_flwr_2fproto_2fclientappio_2eproto;
};
// -------------------------------------------------------------------

class GetTokenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.GetTokenResponse) */ {
 public:
  inline GetTokenResponse() : GetTokenResponse(nullptr) {}
  ~GetTokenResponse() override;
  explicit PROTOBUF_CONSTEXPR GetTokenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTokenResponse(const GetTokenResponse& from);
  GetTokenResponse(GetTokenResponse&& from) noexcept
    : GetTokenResponse() {
    *this = ::std::move(from);
  }

  inline GetTokenResponse& operator=(const GetTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTokenResponse& operator=(GetTokenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTokenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GetTokenResponse*>(
               &_GetTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetTokenResponse& a, GetTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTokenResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTokenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTokenResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTokenResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTokenResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.GetTokenResponse";
  }
  protected:
  explicit GetTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // uint64 token = 1;
  void clear_token();
  uint64_t token() const;
  void set_token(uint64_t value);
  private:
  uint64_t _internal_token() const;
  void _internal_set_token(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.GetTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fclientappio_2eproto;
};
// -------------------------------------------------------------------

class PullClientAppInputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PullClientAppInputsRequest) */ {
 public:
  inline PullClientAppInputsRequest() : PullClientAppInputsRequest(nullptr) {}
  ~PullClientAppInputsRequest() override;
  explicit PROTOBUF_CONSTEXPR PullClientAppInputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullClientAppInputsRequest(const PullClientAppInputsRequest& from);
  PullClientAppInputsRequest(PullClientAppInputsRequest&& from) noexcept
    : PullClientAppInputsRequest() {
    *this = ::std::move(from);
  }

  inline PullClientAppInputsRequest& operator=(const PullClientAppInputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullClientAppInputsRequest& operator=(PullClientAppInputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullClientAppInputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullClientAppInputsRequest* internal_default_instance() {
    return reinterpret_cast<const PullClientAppInputsRequest*>(
               &_PullClientAppInputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PullClientAppInputsRequest& a, PullClientAppInputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullClientAppInputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullClientAppInputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullClientAppInputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullClientAppInputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullClientAppInputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullClientAppInputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullClientAppInputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PullClientAppInputsRequest";
  }
  protected:
  explicit PullClientAppInputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // uint64 token = 1;
  void clear_token();
  uint64_t token() const;
  void set_token(uint64_t value);
  private:
  uint64_t _internal_token() const;
  void _internal_set_token(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.PullClientAppInputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fclientappio_2eproto;
};
// -------------------------------------------------------------------

class PullClientAppInputsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PullClientAppInputsResponse) */ {
 public:
  inline PullClientAppInputsResponse() : PullClientAppInputsResponse(nullptr) {}
  ~PullClientAppInputsResponse() override;
  explicit PROTOBUF_CONSTEXPR PullClientAppInputsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullClientAppInputsResponse(const PullClientAppInputsResponse& from);
  PullClientAppInputsResponse(PullClientAppInputsResponse&& from) noexcept
    : PullClientAppInputsResponse() {
    *this = ::std::move(from);
  }

  inline PullClientAppInputsResponse& operator=(const PullClientAppInputsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullClientAppInputsResponse& operator=(PullClientAppInputsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullClientAppInputsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullClientAppInputsResponse* internal_default_instance() {
    return reinterpret_cast<const PullClientAppInputsResponse*>(
               &_PullClientAppInputsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PullClientAppInputsResponse& a, PullClientAppInputsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullClientAppInputsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullClientAppInputsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullClientAppInputsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullClientAppInputsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullClientAppInputsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullClientAppInputsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullClientAppInputsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PullClientAppInputsResponse";
  }
  protected:
  explicit PullClientAppInputsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kContextFieldNumber = 2,
    kRunFieldNumber = 3,
    kFabFieldNumber = 4,
  };
  // .flwr.proto.Message message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::flwr::proto::Message& message() const;
  PROTOBUF_NODISCARD ::flwr::proto::Message* release_message();
  ::flwr::proto::Message* mutable_message();
  void set_allocated_message(::flwr::proto::Message* message);
  private:
  const ::flwr::proto::Message& _internal_message() const;
  ::flwr::proto::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::flwr::proto::Message* message);
  ::flwr::proto::Message* unsafe_arena_release_message();

  // .flwr.proto.Context context = 2;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::flwr::proto::Context& context() const;
  PROTOBUF_NODISCARD ::flwr::proto::Context* release_context();
  ::flwr::proto::Context* mutable_context();
  void set_allocated_context(::flwr::proto::Context* context);
  private:
  const ::flwr::proto::Context& _internal_context() const;
  ::flwr::proto::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::flwr::proto::Context* context);
  ::flwr::proto::Context* unsafe_arena_release_context();

  // .flwr.proto.Run run = 3;
  bool has_run() const;
  private:
  bool _internal_has_run() const;
  public:
  void clear_run();
  const ::flwr::proto::Run& run() const;
  PROTOBUF_NODISCARD ::flwr::proto::Run* release_run();
  ::flwr::proto::Run* mutable_run();
  void set_allocated_run(::flwr::proto::Run* run);
  private:
  const ::flwr::proto::Run& _internal_run() const;
  ::flwr::proto::Run* _internal_mutable_run();
  public:
  void unsafe_arena_set_allocated_run(
      ::flwr::proto::Run* run);
  ::flwr::proto::Run* unsafe_arena_release_run();

  // .flwr.proto.Fab fab = 4;
  bool has_fab() const;
  private:
  bool _internal_has_fab() const;
  public:
  void clear_fab();
  const ::flwr::proto::Fab& fab() const;
  PROTOBUF_NODISCARD ::flwr::proto::Fab* release_fab();
  ::flwr::proto::Fab* mutable_fab();
  void set_allocated_fab(::flwr::proto::Fab* fab);
  private:
  const ::flwr::proto::Fab& _internal_fab() const;
  ::flwr::proto::Fab* _internal_mutable_fab();
  public:
  void unsafe_arena_set_allocated_fab(
      ::flwr::proto::Fab* fab);
  ::flwr::proto::Fab* unsafe_arena_release_fab();

  // @@protoc_insertion_point(class_scope:flwr.proto.PullClientAppInputsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flwr::proto::Message* message_;
  ::flwr::proto::Context* context_;
  ::flwr::proto::Run* run_;
  ::flwr::proto::Fab* fab_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fclientappio_2eproto;
};
// -------------------------------------------------------------------

class PushClientAppOutputsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PushClientAppOutputsRequest) */ {
 public:
  inline PushClientAppOutputsRequest() : PushClientAppOutputsRequest(nullptr) {}
  ~PushClientAppOutputsRequest() override;
  explicit PROTOBUF_CONSTEXPR PushClientAppOutputsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushClientAppOutputsRequest(const PushClientAppOutputsRequest& from);
  PushClientAppOutputsRequest(PushClientAppOutputsRequest&& from) noexcept
    : PushClientAppOutputsRequest() {
    *this = ::std::move(from);
  }

  inline PushClientAppOutputsRequest& operator=(const PushClientAppOutputsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushClientAppOutputsRequest& operator=(PushClientAppOutputsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushClientAppOutputsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushClientAppOutputsRequest* internal_default_instance() {
    return reinterpret_cast<const PushClientAppOutputsRequest*>(
               &_PushClientAppOutputsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PushClientAppOutputsRequest& a, PushClientAppOutputsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PushClientAppOutputsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushClientAppOutputsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushClientAppOutputsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushClientAppOutputsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushClientAppOutputsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PushClientAppOutputsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushClientAppOutputsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PushClientAppOutputsRequest";
  }
  protected:
  explicit PushClientAppOutputsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kContextFieldNumber = 3,
    kTokenFieldNumber = 1,
  };
  // .flwr.proto.Message message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::flwr::proto::Message& message() const;
  PROTOBUF_NODISCARD ::flwr::proto::Message* release_message();
  ::flwr::proto::Message* mutable_message();
  void set_allocated_message(::flwr::proto::Message* message);
  private:
  const ::flwr::proto::Message& _internal_message() const;
  ::flwr::proto::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::flwr::proto::Message* message);
  ::flwr::proto::Message* unsafe_arena_release_message();

  // .flwr.proto.Context context = 3;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::flwr::proto::Context& context() const;
  PROTOBUF_NODISCARD ::flwr::proto::Context* release_context();
  ::flwr::proto::Context* mutable_context();
  void set_allocated_context(::flwr::proto::Context* context);
  private:
  const ::flwr::proto::Context& _internal_context() const;
  ::flwr::proto::Context* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::flwr::proto::Context* context);
  ::flwr::proto::Context* unsafe_arena_release_context();

  // uint64 token = 1;
  void clear_token();
  uint64_t token() const;
  void set_token(uint64_t value);
  private:
  uint64_t _internal_token() const;
  void _internal_set_token(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.PushClientAppOutputsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flwr::proto::Message* message_;
  ::flwr::proto::Context* context_;
  uint64_t token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fclientappio_2eproto;
};
// -------------------------------------------------------------------

class PushClientAppOutputsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.PushClientAppOutputsResponse) */ {
 public:
  inline PushClientAppOutputsResponse() : PushClientAppOutputsResponse(nullptr) {}
  ~PushClientAppOutputsResponse() override;
  explicit PROTOBUF_CONSTEXPR PushClientAppOutputsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushClientAppOutputsResponse(const PushClientAppOutputsResponse& from);
  PushClientAppOutputsResponse(PushClientAppOutputsResponse&& from) noexcept
    : PushClientAppOutputsResponse() {
    *this = ::std::move(from);
  }

  inline PushClientAppOutputsResponse& operator=(const PushClientAppOutputsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushClientAppOutputsResponse& operator=(PushClientAppOutputsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushClientAppOutputsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushClientAppOutputsResponse* internal_default_instance() {
    return reinterpret_cast<const PushClientAppOutputsResponse*>(
               &_PushClientAppOutputsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PushClientAppOutputsResponse& a, PushClientAppOutputsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PushClientAppOutputsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushClientAppOutputsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushClientAppOutputsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushClientAppOutputsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushClientAppOutputsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PushClientAppOutputsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushClientAppOutputsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.PushClientAppOutputsResponse";
  }
  protected:
  explicit PushClientAppOutputsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .flwr.proto.ClientAppOutputStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::flwr::proto::ClientAppOutputStatus& status() const;
  PROTOBUF_NODISCARD ::flwr::proto::ClientAppOutputStatus* release_status();
  ::flwr::proto::ClientAppOutputStatus* mutable_status();
  void set_allocated_status(::flwr::proto::ClientAppOutputStatus* status);
  private:
  const ::flwr::proto::ClientAppOutputStatus& _internal_status() const;
  ::flwr::proto::ClientAppOutputStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::flwr::proto::ClientAppOutputStatus* status);
  ::flwr::proto::ClientAppOutputStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:flwr.proto.PushClientAppOutputsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flwr::proto::ClientAppOutputStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fclientappio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientAppOutputStatus

// .flwr.proto.ClientAppOutputCode code = 1;
inline void ClientAppOutputStatus::clear_code() {
  code_ = 0;
}
inline ::flwr::proto::ClientAppOutputCode ClientAppOutputStatus::_internal_code() const {
  return static_cast< ::flwr::proto::ClientAppOutputCode >(code_);
}
inline ::flwr::proto::ClientAppOutputCode ClientAppOutputStatus::code() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ClientAppOutputStatus.code)
  return _internal_code();
}
inline void ClientAppOutputStatus::_internal_set_code(::flwr::proto::ClientAppOutputCode value) {
  
  code_ = value;
}
inline void ClientAppOutputStatus::set_code(::flwr::proto::ClientAppOutputCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:flwr.proto.ClientAppOutputStatus.code)
}

// string message = 2;
inline void ClientAppOutputStatus::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ClientAppOutputStatus::message() const {
  // @@protoc_insertion_point(field_get:flwr.proto.ClientAppOutputStatus.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientAppOutputStatus::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.ClientAppOutputStatus.message)
}
inline std::string* ClientAppOutputStatus::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:flwr.proto.ClientAppOutputStatus.message)
  return _s;
}
inline const std::string& ClientAppOutputStatus::_internal_message() const {
  return message_.Get();
}
inline void ClientAppOutputStatus::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientAppOutputStatus::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientAppOutputStatus::release_message() {
  // @@protoc_insertion_point(field_release:flwr.proto.ClientAppOutputStatus.message)
  return message_.Release();
}
inline void ClientAppOutputStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.ClientAppOutputStatus.message)
}

// -------------------------------------------------------------------

// GetTokenRequest

// -------------------------------------------------------------------

// GetTokenResponse

// uint64 token = 1;
inline void GetTokenResponse::clear_token() {
  token_ = uint64_t{0u};
}
inline uint64_t GetTokenResponse::_internal_token() const {
  return token_;
}
inline uint64_t GetTokenResponse::token() const {
  // @@protoc_insertion_point(field_get:flwr.proto.GetTokenResponse.token)
  return _internal_token();
}
inline void GetTokenResponse::_internal_set_token(uint64_t value) {
  
  token_ = value;
}
inline void GetTokenResponse::set_token(uint64_t value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:flwr.proto.GetTokenResponse.token)
}

// -------------------------------------------------------------------

// PullClientAppInputsRequest

// uint64 token = 1;
inline void PullClientAppInputsRequest::clear_token() {
  token_ = uint64_t{0u};
}
inline uint64_t PullClientAppInputsRequest::_internal_token() const {
  return token_;
}
inline uint64_t PullClientAppInputsRequest::token() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullClientAppInputsRequest.token)
  return _internal_token();
}
inline void PullClientAppInputsRequest::_internal_set_token(uint64_t value) {
  
  token_ = value;
}
inline void PullClientAppInputsRequest::set_token(uint64_t value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:flwr.proto.PullClientAppInputsRequest.token)
}

// -------------------------------------------------------------------

// PullClientAppInputsResponse

// .flwr.proto.Message message = 1;
inline bool PullClientAppInputsResponse::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool PullClientAppInputsResponse::has_message() const {
  return _internal_has_message();
}
inline const ::flwr::proto::Message& PullClientAppInputsResponse::_internal_message() const {
  const ::flwr::proto::Message* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Message&>(
      ::flwr::proto::_Message_default_instance_);
}
inline const ::flwr::proto::Message& PullClientAppInputsResponse::message() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullClientAppInputsResponse.message)
  return _internal_message();
}
inline void PullClientAppInputsResponse::unsafe_arena_set_allocated_message(
    ::flwr::proto::Message* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PullClientAppInputsResponse.message)
}
inline ::flwr::proto::Message* PullClientAppInputsResponse::release_message() {
  
  ::flwr::proto::Message* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Message* PullClientAppInputsResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:flwr.proto.PullClientAppInputsResponse.message)
  
  ::flwr::proto::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::flwr::proto::Message* PullClientAppInputsResponse::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Message>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::flwr::proto::Message* PullClientAppInputsResponse::mutable_message() {
  ::flwr::proto::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullClientAppInputsResponse.message)
  return _msg;
}
inline void PullClientAppInputsResponse::set_allocated_message(::flwr::proto::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PullClientAppInputsResponse.message)
}

// .flwr.proto.Context context = 2;
inline bool PullClientAppInputsResponse::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool PullClientAppInputsResponse::has_context() const {
  return _internal_has_context();
}
inline const ::flwr::proto::Context& PullClientAppInputsResponse::_internal_context() const {
  const ::flwr::proto::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Context&>(
      ::flwr::proto::_Context_default_instance_);
}
inline const ::flwr::proto::Context& PullClientAppInputsResponse::context() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullClientAppInputsResponse.context)
  return _internal_context();
}
inline void PullClientAppInputsResponse::unsafe_arena_set_allocated_context(
    ::flwr::proto::Context* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PullClientAppInputsResponse.context)
}
inline ::flwr::proto::Context* PullClientAppInputsResponse::release_context() {
  
  ::flwr::proto::Context* temp = context_;
  context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Context* PullClientAppInputsResponse::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:flwr.proto.PullClientAppInputsResponse.context)
  
  ::flwr::proto::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::flwr::proto::Context* PullClientAppInputsResponse::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Context>(GetArenaForAllocation());
    context_ = p;
  }
  return context_;
}
inline ::flwr::proto::Context* PullClientAppInputsResponse::mutable_context() {
  ::flwr::proto::Context* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullClientAppInputsResponse.context)
  return _msg;
}
inline void PullClientAppInputsResponse::set_allocated_context(::flwr::proto::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context));
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PullClientAppInputsResponse.context)
}

// .flwr.proto.Run run = 3;
inline bool PullClientAppInputsResponse::_internal_has_run() const {
  return this != internal_default_instance() && run_ != nullptr;
}
inline bool PullClientAppInputsResponse::has_run() const {
  return _internal_has_run();
}
inline const ::flwr::proto::Run& PullClientAppInputsResponse::_internal_run() const {
  const ::flwr::proto::Run* p = run_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Run&>(
      ::flwr::proto::_Run_default_instance_);
}
inline const ::flwr::proto::Run& PullClientAppInputsResponse::run() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullClientAppInputsResponse.run)
  return _internal_run();
}
inline void PullClientAppInputsResponse::unsafe_arena_set_allocated_run(
    ::flwr::proto::Run* run) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_);
  }
  run_ = run;
  if (run) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PullClientAppInputsResponse.run)
}
inline ::flwr::proto::Run* PullClientAppInputsResponse::release_run() {
  
  ::flwr::proto::Run* temp = run_;
  run_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Run* PullClientAppInputsResponse::unsafe_arena_release_run() {
  // @@protoc_insertion_point(field_release:flwr.proto.PullClientAppInputsResponse.run)
  
  ::flwr::proto::Run* temp = run_;
  run_ = nullptr;
  return temp;
}
inline ::flwr::proto::Run* PullClientAppInputsResponse::_internal_mutable_run() {
  
  if (run_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Run>(GetArenaForAllocation());
    run_ = p;
  }
  return run_;
}
inline ::flwr::proto::Run* PullClientAppInputsResponse::mutable_run() {
  ::flwr::proto::Run* _msg = _internal_mutable_run();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullClientAppInputsResponse.run)
  return _msg;
}
inline void PullClientAppInputsResponse::set_allocated_run(::flwr::proto::Run* run) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(run_);
  }
  if (run) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(run));
    if (message_arena != submessage_arena) {
      run = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, run, submessage_arena);
    }
    
  } else {
    
  }
  run_ = run;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PullClientAppInputsResponse.run)
}

// .flwr.proto.Fab fab = 4;
inline bool PullClientAppInputsResponse::_internal_has_fab() const {
  return this != internal_default_instance() && fab_ != nullptr;
}
inline bool PullClientAppInputsResponse::has_fab() const {
  return _internal_has_fab();
}
inline const ::flwr::proto::Fab& PullClientAppInputsResponse::_internal_fab() const {
  const ::flwr::proto::Fab* p = fab_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Fab&>(
      ::flwr::proto::_Fab_default_instance_);
}
inline const ::flwr::proto::Fab& PullClientAppInputsResponse::fab() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PullClientAppInputsResponse.fab)
  return _internal_fab();
}
inline void PullClientAppInputsResponse::unsafe_arena_set_allocated_fab(
    ::flwr::proto::Fab* fab) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fab_);
  }
  fab_ = fab;
  if (fab) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PullClientAppInputsResponse.fab)
}
inline ::flwr::proto::Fab* PullClientAppInputsResponse::release_fab() {
  
  ::flwr::proto::Fab* temp = fab_;
  fab_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Fab* PullClientAppInputsResponse::unsafe_arena_release_fab() {
  // @@protoc_insertion_point(field_release:flwr.proto.PullClientAppInputsResponse.fab)
  
  ::flwr::proto::Fab* temp = fab_;
  fab_ = nullptr;
  return temp;
}
inline ::flwr::proto::Fab* PullClientAppInputsResponse::_internal_mutable_fab() {
  
  if (fab_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Fab>(GetArenaForAllocation());
    fab_ = p;
  }
  return fab_;
}
inline ::flwr::proto::Fab* PullClientAppInputsResponse::mutable_fab() {
  ::flwr::proto::Fab* _msg = _internal_mutable_fab();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PullClientAppInputsResponse.fab)
  return _msg;
}
inline void PullClientAppInputsResponse::set_allocated_fab(::flwr::proto::Fab* fab) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fab_);
  }
  if (fab) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fab));
    if (message_arena != submessage_arena) {
      fab = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fab, submessage_arena);
    }
    
  } else {
    
  }
  fab_ = fab;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PullClientAppInputsResponse.fab)
}

// -------------------------------------------------------------------

// PushClientAppOutputsRequest

// uint64 token = 1;
inline void PushClientAppOutputsRequest::clear_token() {
  token_ = uint64_t{0u};
}
inline uint64_t PushClientAppOutputsRequest::_internal_token() const {
  return token_;
}
inline uint64_t PushClientAppOutputsRequest::token() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PushClientAppOutputsRequest.token)
  return _internal_token();
}
inline void PushClientAppOutputsRequest::_internal_set_token(uint64_t value) {
  
  token_ = value;
}
inline void PushClientAppOutputsRequest::set_token(uint64_t value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:flwr.proto.PushClientAppOutputsRequest.token)
}

// .flwr.proto.Message message = 2;
inline bool PushClientAppOutputsRequest::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool PushClientAppOutputsRequest::has_message() const {
  return _internal_has_message();
}
inline const ::flwr::proto::Message& PushClientAppOutputsRequest::_internal_message() const {
  const ::flwr::proto::Message* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Message&>(
      ::flwr::proto::_Message_default_instance_);
}
inline const ::flwr::proto::Message& PushClientAppOutputsRequest::message() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PushClientAppOutputsRequest.message)
  return _internal_message();
}
inline void PushClientAppOutputsRequest::unsafe_arena_set_allocated_message(
    ::flwr::proto::Message* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PushClientAppOutputsRequest.message)
}
inline ::flwr::proto::Message* PushClientAppOutputsRequest::release_message() {
  
  ::flwr::proto::Message* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Message* PushClientAppOutputsRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:flwr.proto.PushClientAppOutputsRequest.message)
  
  ::flwr::proto::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::flwr::proto::Message* PushClientAppOutputsRequest::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Message>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::flwr::proto::Message* PushClientAppOutputsRequest::mutable_message() {
  ::flwr::proto::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PushClientAppOutputsRequest.message)
  return _msg;
}
inline void PushClientAppOutputsRequest::set_allocated_message(::flwr::proto::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PushClientAppOutputsRequest.message)
}

// .flwr.proto.Context context = 3;
inline bool PushClientAppOutputsRequest::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool PushClientAppOutputsRequest::has_context() const {
  return _internal_has_context();
}
inline const ::flwr::proto::Context& PushClientAppOutputsRequest::_internal_context() const {
  const ::flwr::proto::Context* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::Context&>(
      ::flwr::proto::_Context_default_instance_);
}
inline const ::flwr::proto::Context& PushClientAppOutputsRequest::context() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PushClientAppOutputsRequest.context)
  return _internal_context();
}
inline void PushClientAppOutputsRequest::unsafe_arena_set_allocated_context(
    ::flwr::proto::Context* context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PushClientAppOutputsRequest.context)
}
inline ::flwr::proto::Context* PushClientAppOutputsRequest::release_context() {
  
  ::flwr::proto::Context* temp = context_;
  context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::Context* PushClientAppOutputsRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:flwr.proto.PushClientAppOutputsRequest.context)
  
  ::flwr::proto::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::flwr::proto::Context* PushClientAppOutputsRequest::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::Context>(GetArenaForAllocation());
    context_ = p;
  }
  return context_;
}
inline ::flwr::proto::Context* PushClientAppOutputsRequest::mutable_context() {
  ::flwr::proto::Context* _msg = _internal_mutable_context();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PushClientAppOutputsRequest.context)
  return _msg;
}
inline void PushClientAppOutputsRequest::set_allocated_context(::flwr::proto::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context));
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PushClientAppOutputsRequest.context)
}

// -------------------------------------------------------------------

// PushClientAppOutputsResponse

// .flwr.proto.ClientAppOutputStatus status = 1;
inline bool PushClientAppOutputsResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PushClientAppOutputsResponse::has_status() const {
  return _internal_has_status();
}
inline void PushClientAppOutputsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::flwr::proto::ClientAppOutputStatus& PushClientAppOutputsResponse::_internal_status() const {
  const ::flwr::proto::ClientAppOutputStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::flwr::proto::ClientAppOutputStatus&>(
      ::flwr::proto::_ClientAppOutputStatus_default_instance_);
}
inline const ::flwr::proto::ClientAppOutputStatus& PushClientAppOutputsResponse::status() const {
  // @@protoc_insertion_point(field_get:flwr.proto.PushClientAppOutputsResponse.status)
  return _internal_status();
}
inline void PushClientAppOutputsResponse::unsafe_arena_set_allocated_status(
    ::flwr::proto::ClientAppOutputStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flwr.proto.PushClientAppOutputsResponse.status)
}
inline ::flwr::proto::ClientAppOutputStatus* PushClientAppOutputsResponse::release_status() {
  
  ::flwr::proto::ClientAppOutputStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flwr::proto::ClientAppOutputStatus* PushClientAppOutputsResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:flwr.proto.PushClientAppOutputsResponse.status)
  
  ::flwr::proto::ClientAppOutputStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::flwr::proto::ClientAppOutputStatus* PushClientAppOutputsResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::flwr::proto::ClientAppOutputStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::flwr::proto::ClientAppOutputStatus* PushClientAppOutputsResponse::mutable_status() {
  ::flwr::proto::ClientAppOutputStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:flwr.proto.PushClientAppOutputsResponse.status)
  return _msg;
}
inline void PushClientAppOutputsResponse::set_allocated_status(::flwr::proto::ClientAppOutputStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.PushClientAppOutputsResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flwr

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flwr::proto::ClientAppOutputCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flwr::proto::ClientAppOutputCode>() {
  return ::flwr::proto::ClientAppOutputCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fclientappio_2eproto

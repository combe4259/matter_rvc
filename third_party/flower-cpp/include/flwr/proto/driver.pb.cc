// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/driver.proto

#include "flwr/proto/driver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace flwr {
namespace proto {
PROTOBUF_CONSTEXPR GetNodesRequest::GetNodesRequest(
    ::_pbi::ConstantInitialized)
  : run_id_(uint64_t{0u}){}
struct GetNodesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNodesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNodesRequestDefaultTypeInternal() {}
  union {
    GetNodesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNodesRequestDefaultTypeInternal _GetNodesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetNodesResponse::GetNodesResponse(
    ::_pbi::ConstantInitialized)
  : nodes_(){}
struct GetNodesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNodesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNodesResponseDefaultTypeInternal() {}
  union {
    GetNodesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNodesResponseDefaultTypeInternal _GetNodesResponse_default_instance_;
PROTOBUF_CONSTEXPR PushTaskInsRequest::PushTaskInsRequest(
    ::_pbi::ConstantInitialized)
  : task_ins_list_(){}
struct PushTaskInsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushTaskInsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushTaskInsRequestDefaultTypeInternal() {}
  union {
    PushTaskInsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushTaskInsRequestDefaultTypeInternal _PushTaskInsRequest_default_instance_;
PROTOBUF_CONSTEXPR PushTaskInsResponse::PushTaskInsResponse(
    ::_pbi::ConstantInitialized)
  : task_ids_(){}
struct PushTaskInsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushTaskInsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushTaskInsResponseDefaultTypeInternal() {}
  union {
    PushTaskInsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushTaskInsResponseDefaultTypeInternal _PushTaskInsResponse_default_instance_;
PROTOBUF_CONSTEXPR PullTaskResRequest::PullTaskResRequest(
    ::_pbi::ConstantInitialized)
  : task_ids_()
  , node_(nullptr){}
struct PullTaskResRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullTaskResRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullTaskResRequestDefaultTypeInternal() {}
  union {
    PullTaskResRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullTaskResRequestDefaultTypeInternal _PullTaskResRequest_default_instance_;
PROTOBUF_CONSTEXPR PullTaskResResponse::PullTaskResResponse(
    ::_pbi::ConstantInitialized)
  : task_res_list_(){}
struct PullTaskResResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullTaskResResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullTaskResResponseDefaultTypeInternal() {}
  union {
    PullTaskResResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullTaskResResponseDefaultTypeInternal _PullTaskResResponse_default_instance_;
}  // namespace proto
}  // namespace flwr
static ::_pb::Metadata file_level_metadata_flwr_2fproto_2fdriver_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_flwr_2fproto_2fdriver_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_flwr_2fproto_2fdriver_2eproto = nullptr;

const uint32_t TableStruct_flwr_2fproto_2fdriver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetNodesRequest, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetNodesResponse, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::PushTaskInsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::PushTaskInsRequest, task_ins_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::PushTaskInsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::PushTaskInsResponse, task_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::PullTaskResRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::PullTaskResRequest, node_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::PullTaskResRequest, task_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::PullTaskResResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::PullTaskResResponse, task_res_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flwr::proto::GetNodesRequest)},
  { 7, -1, -1, sizeof(::flwr::proto::GetNodesResponse)},
  { 14, -1, -1, sizeof(::flwr::proto::PushTaskInsRequest)},
  { 21, -1, -1, sizeof(::flwr::proto::PushTaskInsResponse)},
  { 28, -1, -1, sizeof(::flwr::proto::PullTaskResRequest)},
  { 36, -1, -1, sizeof(::flwr::proto::PullTaskResResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::flwr::proto::_GetNodesRequest_default_instance_._instance,
  &::flwr::proto::_GetNodesResponse_default_instance_._instance,
  &::flwr::proto::_PushTaskInsRequest_default_instance_._instance,
  &::flwr::proto::_PushTaskInsResponse_default_instance_._instance,
  &::flwr::proto::_PullTaskResRequest_default_instance_._instance,
  &::flwr::proto::_PullTaskResResponse_default_instance_._instance,
};

const char descriptor_table_protodef_flwr_2fproto_2fdriver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027flwr/proto/driver.proto\022\nflwr.proto\032\025f"
  "lwr/proto/node.proto\032\025flwr/proto/task.pr"
  "oto\032\024flwr/proto/run.proto\032\024flwr/proto/fa"
  "b.proto\"!\n\017GetNodesRequest\022\016\n\006run_id\030\001 \001"
  "(\004\"3\n\020GetNodesResponse\022\037\n\005nodes\030\001 \003(\0132\020."
  "flwr.proto.Node\"@\n\022PushTaskInsRequest\022*\n"
  "\rtask_ins_list\030\001 \003(\0132\023.flwr.proto.TaskIn"
  "s\"\'\n\023PushTaskInsResponse\022\020\n\010task_ids\030\002 \003"
  "(\t\"F\n\022PullTaskResRequest\022\036\n\004node\030\001 \001(\0132\020"
  ".flwr.proto.Node\022\020\n\010task_ids\030\002 \003(\t\"A\n\023Pu"
  "llTaskResResponse\022*\n\rtask_res_list\030\001 \003(\013"
  "2\023.flwr.proto.TaskRes2\307\003\n\006Driver\022J\n\tCrea"
  "teRun\022\034.flwr.proto.CreateRunRequest\032\035.fl"
  "wr.proto.CreateRunResponse\"\000\022G\n\010GetNodes"
  "\022\033.flwr.proto.GetNodesRequest\032\034.flwr.pro"
  "to.GetNodesResponse\"\000\022P\n\013PushTaskIns\022\036.f"
  "lwr.proto.PushTaskInsRequest\032\037.flwr.prot"
  "o.PushTaskInsResponse\"\000\022P\n\013PullTaskRes\022\036"
  ".flwr.proto.PullTaskResRequest\032\037.flwr.pr"
  "oto.PullTaskResResponse\"\000\022A\n\006GetRun\022\031.fl"
  "wr.proto.GetRunRequest\032\032.flwr.proto.GetR"
  "unResponse\"\000\022A\n\006GetFab\022\031.flwr.proto.GetF"
  "abRequest\032\032.flwr.proto.GetFabResponse\"\000b"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_flwr_2fproto_2fdriver_2eproto_deps[4] = {
  &::descriptor_table_flwr_2fproto_2ffab_2eproto,
  &::descriptor_table_flwr_2fproto_2fnode_2eproto,
  &::descriptor_table_flwr_2fproto_2frun_2eproto,
  &::descriptor_table_flwr_2fproto_2ftask_2eproto,
};
static ::_pbi::once_flag descriptor_table_flwr_2fproto_2fdriver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_flwr_2fproto_2fdriver_2eproto = {
    false, false, 927, descriptor_table_protodef_flwr_2fproto_2fdriver_2eproto,
    "flwr/proto/driver.proto",
    &descriptor_table_flwr_2fproto_2fdriver_2eproto_once, descriptor_table_flwr_2fproto_2fdriver_2eproto_deps, 4, 6,
    schemas, file_default_instances, TableStruct_flwr_2fproto_2fdriver_2eproto::offsets,
    file_level_metadata_flwr_2fproto_2fdriver_2eproto, file_level_enum_descriptors_flwr_2fproto_2fdriver_2eproto,
    file_level_service_descriptors_flwr_2fproto_2fdriver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_flwr_2fproto_2fdriver_2eproto_getter() {
  return &descriptor_table_flwr_2fproto_2fdriver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_flwr_2fproto_2fdriver_2eproto(&descriptor_table_flwr_2fproto_2fdriver_2eproto);
namespace flwr {
namespace proto {

// ===================================================================

class GetNodesRequest::_Internal {
 public:
};

GetNodesRequest::GetNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.GetNodesRequest)
}
GetNodesRequest::GetNodesRequest(const GetNodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_ = from.run_id_;
  // @@protoc_insertion_point(copy_constructor:flwr.proto.GetNodesRequest)
}

inline void GetNodesRequest::SharedCtor() {
run_id_ = uint64_t{0u};
}

GetNodesRequest::~GetNodesRequest() {
  // @@protoc_insertion_point(destructor:flwr.proto.GetNodesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNodesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.GetNodesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNodesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.GetNodesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.GetNodesRequest)
  return target;
}

size_t GetNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.GetNodesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNodesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetNodesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNodesRequest::GetClassData() const { return &_class_data_; }

void GetNodesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetNodesRequest *>(to)->MergeFrom(
      static_cast<const GetNodesRequest &>(from));
}


void GetNodesRequest::MergeFrom(const GetNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.GetNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_run_id() != 0) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNodesRequest::CopyFrom(const GetNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.GetNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodesRequest::IsInitialized() const {
  return true;
}

void GetNodesRequest::InternalSwap(GetNodesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(run_id_, other->run_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fdriver_2eproto_getter, &descriptor_table_flwr_2fproto_2fdriver_2eproto_once,
      file_level_metadata_flwr_2fproto_2fdriver_2eproto[0]);
}

// ===================================================================

class GetNodesResponse::_Internal {
 public:
};

void GetNodesResponse::clear_nodes() {
  nodes_.Clear();
}
GetNodesResponse::GetNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.GetNodesResponse)
}
GetNodesResponse::GetNodesResponse(const GetNodesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.GetNodesResponse)
}

inline void GetNodesResponse::SharedCtor() {
}

GetNodesResponse::~GetNodesResponse() {
  // @@protoc_insertion_point(destructor:flwr.proto.GetNodesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNodesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetNodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.GetNodesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .flwr.proto.Node nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNodesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.GetNodesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flwr.proto.Node nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.GetNodesResponse)
  return target;
}

size_t GetNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.GetNodesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flwr.proto.Node nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNodesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetNodesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNodesResponse::GetClassData() const { return &_class_data_; }

void GetNodesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetNodesResponse *>(to)->MergeFrom(
      static_cast<const GetNodesResponse &>(from));
}


void GetNodesResponse::MergeFrom(const GetNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.GetNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNodesResponse::CopyFrom(const GetNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.GetNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodesResponse::IsInitialized() const {
  return true;
}

void GetNodesResponse::InternalSwap(GetNodesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fdriver_2eproto_getter, &descriptor_table_flwr_2fproto_2fdriver_2eproto_once,
      file_level_metadata_flwr_2fproto_2fdriver_2eproto[1]);
}

// ===================================================================

class PushTaskInsRequest::_Internal {
 public:
};

void PushTaskInsRequest::clear_task_ins_list() {
  task_ins_list_.Clear();
}
PushTaskInsRequest::PushTaskInsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  task_ins_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.PushTaskInsRequest)
}
PushTaskInsRequest::PushTaskInsRequest(const PushTaskInsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_ins_list_(from.task_ins_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.PushTaskInsRequest)
}

inline void PushTaskInsRequest::SharedCtor() {
}

PushTaskInsRequest::~PushTaskInsRequest() {
  // @@protoc_insertion_point(destructor:flwr.proto.PushTaskInsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PushTaskInsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PushTaskInsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushTaskInsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.PushTaskInsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_ins_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushTaskInsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .flwr.proto.TaskIns task_ins_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_ins_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushTaskInsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.PushTaskInsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flwr.proto.TaskIns task_ins_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_task_ins_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_task_ins_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.PushTaskInsRequest)
  return target;
}

size_t PushTaskInsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.PushTaskInsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flwr.proto.TaskIns task_ins_list = 1;
  total_size += 1UL * this->_internal_task_ins_list_size();
  for (const auto& msg : this->task_ins_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushTaskInsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PushTaskInsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushTaskInsRequest::GetClassData() const { return &_class_data_; }

void PushTaskInsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PushTaskInsRequest *>(to)->MergeFrom(
      static_cast<const PushTaskInsRequest &>(from));
}


void PushTaskInsRequest::MergeFrom(const PushTaskInsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.PushTaskInsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  task_ins_list_.MergeFrom(from.task_ins_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushTaskInsRequest::CopyFrom(const PushTaskInsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.PushTaskInsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushTaskInsRequest::IsInitialized() const {
  return true;
}

void PushTaskInsRequest::InternalSwap(PushTaskInsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  task_ins_list_.InternalSwap(&other->task_ins_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushTaskInsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fdriver_2eproto_getter, &descriptor_table_flwr_2fproto_2fdriver_2eproto_once,
      file_level_metadata_flwr_2fproto_2fdriver_2eproto[2]);
}

// ===================================================================

class PushTaskInsResponse::_Internal {
 public:
};

PushTaskInsResponse::PushTaskInsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  task_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.PushTaskInsResponse)
}
PushTaskInsResponse::PushTaskInsResponse(const PushTaskInsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_ids_(from.task_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.PushTaskInsResponse)
}

inline void PushTaskInsResponse::SharedCtor() {
}

PushTaskInsResponse::~PushTaskInsResponse() {
  // @@protoc_insertion_point(destructor:flwr.proto.PushTaskInsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PushTaskInsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PushTaskInsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushTaskInsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.PushTaskInsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushTaskInsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string task_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_task_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.PushTaskInsResponse.task_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushTaskInsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.PushTaskInsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string task_ids = 2;
  for (int i = 0, n = this->_internal_task_ids_size(); i < n; i++) {
    const auto& s = this->_internal_task_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.PushTaskInsResponse.task_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.PushTaskInsResponse)
  return target;
}

size_t PushTaskInsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.PushTaskInsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string task_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(task_ids_.size());
  for (int i = 0, n = task_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      task_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushTaskInsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PushTaskInsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushTaskInsResponse::GetClassData() const { return &_class_data_; }

void PushTaskInsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PushTaskInsResponse *>(to)->MergeFrom(
      static_cast<const PushTaskInsResponse &>(from));
}


void PushTaskInsResponse::MergeFrom(const PushTaskInsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.PushTaskInsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  task_ids_.MergeFrom(from.task_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushTaskInsResponse::CopyFrom(const PushTaskInsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.PushTaskInsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushTaskInsResponse::IsInitialized() const {
  return true;
}

void PushTaskInsResponse::InternalSwap(PushTaskInsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  task_ids_.InternalSwap(&other->task_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushTaskInsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fdriver_2eproto_getter, &descriptor_table_flwr_2fproto_2fdriver_2eproto_once,
      file_level_metadata_flwr_2fproto_2fdriver_2eproto[3]);
}

// ===================================================================

class PullTaskResRequest::_Internal {
 public:
  static const ::flwr::proto::Node& node(const PullTaskResRequest* msg);
};

const ::flwr::proto::Node&
PullTaskResRequest::_Internal::node(const PullTaskResRequest* msg) {
  return *msg->node_;
}
void PullTaskResRequest::clear_node() {
  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
PullTaskResRequest::PullTaskResRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  task_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.PullTaskResRequest)
}
PullTaskResRequest::PullTaskResRequest(const PullTaskResRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_ids_(from.task_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::flwr::proto::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.PullTaskResRequest)
}

inline void PullTaskResRequest::SharedCtor() {
node_ = nullptr;
}

PullTaskResRequest::~PullTaskResRequest() {
  // @@protoc_insertion_point(destructor:flwr.proto.PullTaskResRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PullTaskResRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete node_;
}

void PullTaskResRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PullTaskResRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.PullTaskResRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullTaskResRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flwr.proto.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string task_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_task_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.PullTaskResRequest.task_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PullTaskResRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.PullTaskResRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .flwr.proto.Node node = 1;
  if (this->_internal_has_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::node(this),
        _Internal::node(this).GetCachedSize(), target, stream);
  }

  // repeated string task_ids = 2;
  for (int i = 0, n = this->_internal_task_ids_size(); i < n; i++) {
    const auto& s = this->_internal_task_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.PullTaskResRequest.task_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.PullTaskResRequest)
  return target;
}

size_t PullTaskResRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.PullTaskResRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string task_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(task_ids_.size());
  for (int i = 0, n = task_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      task_ids_.Get(i));
  }

  // .flwr.proto.Node node = 1;
  if (this->_internal_has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullTaskResRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PullTaskResRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullTaskResRequest::GetClassData() const { return &_class_data_; }

void PullTaskResRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PullTaskResRequest *>(to)->MergeFrom(
      static_cast<const PullTaskResRequest &>(from));
}


void PullTaskResRequest::MergeFrom(const PullTaskResRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.PullTaskResRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  task_ids_.MergeFrom(from.task_ids_);
  if (from._internal_has_node()) {
    _internal_mutable_node()->::flwr::proto::Node::MergeFrom(from._internal_node());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PullTaskResRequest::CopyFrom(const PullTaskResRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.PullTaskResRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullTaskResRequest::IsInitialized() const {
  return true;
}

void PullTaskResRequest::InternalSwap(PullTaskResRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  task_ids_.InternalSwap(&other->task_ids_);
  swap(node_, other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullTaskResRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fdriver_2eproto_getter, &descriptor_table_flwr_2fproto_2fdriver_2eproto_once,
      file_level_metadata_flwr_2fproto_2fdriver_2eproto[4]);
}

// ===================================================================

class PullTaskResResponse::_Internal {
 public:
};

void PullTaskResResponse::clear_task_res_list() {
  task_res_list_.Clear();
}
PullTaskResResponse::PullTaskResResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  task_res_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.PullTaskResResponse)
}
PullTaskResResponse::PullTaskResResponse(const PullTaskResResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_res_list_(from.task_res_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.PullTaskResResponse)
}

inline void PullTaskResResponse::SharedCtor() {
}

PullTaskResResponse::~PullTaskResResponse() {
  // @@protoc_insertion_point(destructor:flwr.proto.PullTaskResResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PullTaskResResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PullTaskResResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PullTaskResResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.PullTaskResResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_res_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullTaskResResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .flwr.proto.TaskRes task_res_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_res_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PullTaskResResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.PullTaskResResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flwr.proto.TaskRes task_res_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_task_res_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_task_res_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.PullTaskResResponse)
  return target;
}

size_t PullTaskResResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.PullTaskResResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flwr.proto.TaskRes task_res_list = 1;
  total_size += 1UL * this->_internal_task_res_list_size();
  for (const auto& msg : this->task_res_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullTaskResResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PullTaskResResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullTaskResResponse::GetClassData() const { return &_class_data_; }

void PullTaskResResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PullTaskResResponse *>(to)->MergeFrom(
      static_cast<const PullTaskResResponse &>(from));
}


void PullTaskResResponse::MergeFrom(const PullTaskResResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.PullTaskResResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  task_res_list_.MergeFrom(from.task_res_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PullTaskResResponse::CopyFrom(const PullTaskResResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.PullTaskResResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullTaskResResponse::IsInitialized() const {
  return true;
}

void PullTaskResResponse::InternalSwap(PullTaskResResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  task_res_list_.InternalSwap(&other->task_res_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullTaskResResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2fdriver_2eproto_getter, &descriptor_table_flwr_2fproto_2fdriver_2eproto_once,
      file_level_metadata_flwr_2fproto_2fdriver_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flwr::proto::GetNodesRequest*
Arena::CreateMaybeMessage< ::flwr::proto::GetNodesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::GetNodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::GetNodesResponse*
Arena::CreateMaybeMessage< ::flwr::proto::GetNodesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::GetNodesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::PushTaskInsRequest*
Arena::CreateMaybeMessage< ::flwr::proto::PushTaskInsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::PushTaskInsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::PushTaskInsResponse*
Arena::CreateMaybeMessage< ::flwr::proto::PushTaskInsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::PushTaskInsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::PullTaskResRequest*
Arena::CreateMaybeMessage< ::flwr::proto::PullTaskResRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::PullTaskResRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::PullTaskResResponse*
Arena::CreateMaybeMessage< ::flwr::proto::PullTaskResResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::PullTaskResResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

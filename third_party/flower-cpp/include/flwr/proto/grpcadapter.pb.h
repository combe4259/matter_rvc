// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/grpcadapter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fgrpcadapter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fgrpcadapter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flwr_2fproto_2fgrpcadapter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flwr_2fproto_2fgrpcadapter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flwr_2fproto_2fgrpcadapter_2eproto;
namespace flwr {
namespace proto {
class MessageContainer;
struct MessageContainerDefaultTypeInternal;
extern MessageContainerDefaultTypeInternal _MessageContainer_default_instance_;
class MessageContainer_MetadataEntry_DoNotUse;
struct MessageContainer_MetadataEntry_DoNotUseDefaultTypeInternal;
extern MessageContainer_MetadataEntry_DoNotUseDefaultTypeInternal _MessageContainer_MetadataEntry_DoNotUse_default_instance_;
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> ::flwr::proto::MessageContainer* Arena::CreateMaybeMessage<::flwr::proto::MessageContainer>(Arena*);
template<> ::flwr::proto::MessageContainer_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::flwr::proto::MessageContainer_MetadataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flwr {
namespace proto {

// ===================================================================

class MessageContainer_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MessageContainer_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MessageContainer_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  MessageContainer_MetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR MessageContainer_MetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MessageContainer_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MessageContainer_MetadataEntry_DoNotUse& other);
  static const MessageContainer_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MessageContainer_MetadataEntry_DoNotUse*>(&_MessageContainer_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.MessageContainer.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flwr.proto.MessageContainer.MetadataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_flwr_2fproto_2fgrpcadapter_2eproto;
};

// -------------------------------------------------------------------

class MessageContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flwr.proto.MessageContainer) */ {
 public:
  inline MessageContainer() : MessageContainer(nullptr) {}
  ~MessageContainer() override;
  explicit PROTOBUF_CONSTEXPR MessageContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageContainer(const MessageContainer& from);
  MessageContainer(MessageContainer&& from) noexcept
    : MessageContainer() {
    *this = ::std::move(from);
  }

  inline MessageContainer& operator=(const MessageContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageContainer& operator=(MessageContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageContainer* internal_default_instance() {
    return reinterpret_cast<const MessageContainer*>(
               &_MessageContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageContainer& a, MessageContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageContainer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flwr.proto.MessageContainer";
  }
  protected:
  explicit MessageContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kGrpcMessageNameFieldNumber = 2,
    kGrpcMessageContentFieldNumber = 3,
  };
  // map<string, string> metadata = 1;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string grpc_message_name = 2;
  void clear_grpc_message_name();
  const std::string& grpc_message_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_grpc_message_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_grpc_message_name();
  PROTOBUF_NODISCARD std::string* release_grpc_message_name();
  void set_allocated_grpc_message_name(std::string* grpc_message_name);
  private:
  const std::string& _internal_grpc_message_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grpc_message_name(const std::string& value);
  std::string* _internal_mutable_grpc_message_name();
  public:

  // bytes grpc_message_content = 3;
  void clear_grpc_message_content();
  const std::string& grpc_message_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_grpc_message_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_grpc_message_content();
  PROTOBUF_NODISCARD std::string* release_grpc_message_content();
  void set_allocated_grpc_message_content(std::string* grpc_message_content);
  private:
  const std::string& _internal_grpc_message_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grpc_message_content(const std::string& value);
  std::string* _internal_mutable_grpc_message_content();
  public:

  // @@protoc_insertion_point(class_scope:flwr.proto.MessageContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MessageContainer_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grpc_message_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grpc_message_content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flwr_2fproto_2fgrpcadapter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MessageContainer

// map<string, string> metadata = 1;
inline int MessageContainer::_internal_metadata_size() const {
  return metadata_.size();
}
inline int MessageContainer::metadata_size() const {
  return _internal_metadata_size();
}
inline void MessageContainer::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MessageContainer::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MessageContainer::metadata() const {
  // @@protoc_insertion_point(field_map:flwr.proto.MessageContainer.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MessageContainer::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MessageContainer::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:flwr.proto.MessageContainer.metadata)
  return _internal_mutable_metadata();
}

// string grpc_message_name = 2;
inline void MessageContainer::clear_grpc_message_name() {
  grpc_message_name_.ClearToEmpty();
}
inline const std::string& MessageContainer::grpc_message_name() const {
  // @@protoc_insertion_point(field_get:flwr.proto.MessageContainer.grpc_message_name)
  return _internal_grpc_message_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageContainer::set_grpc_message_name(ArgT0&& arg0, ArgT... args) {
 
 grpc_message_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.MessageContainer.grpc_message_name)
}
inline std::string* MessageContainer::mutable_grpc_message_name() {
  std::string* _s = _internal_mutable_grpc_message_name();
  // @@protoc_insertion_point(field_mutable:flwr.proto.MessageContainer.grpc_message_name)
  return _s;
}
inline const std::string& MessageContainer::_internal_grpc_message_name() const {
  return grpc_message_name_.Get();
}
inline void MessageContainer::_internal_set_grpc_message_name(const std::string& value) {
  
  grpc_message_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageContainer::_internal_mutable_grpc_message_name() {
  
  return grpc_message_name_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageContainer::release_grpc_message_name() {
  // @@protoc_insertion_point(field_release:flwr.proto.MessageContainer.grpc_message_name)
  return grpc_message_name_.Release();
}
inline void MessageContainer::set_allocated_grpc_message_name(std::string* grpc_message_name) {
  if (grpc_message_name != nullptr) {
    
  } else {
    
  }
  grpc_message_name_.SetAllocated(grpc_message_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (grpc_message_name_.IsDefault()) {
    grpc_message_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.MessageContainer.grpc_message_name)
}

// bytes grpc_message_content = 3;
inline void MessageContainer::clear_grpc_message_content() {
  grpc_message_content_.ClearToEmpty();
}
inline const std::string& MessageContainer::grpc_message_content() const {
  // @@protoc_insertion_point(field_get:flwr.proto.MessageContainer.grpc_message_content)
  return _internal_grpc_message_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageContainer::set_grpc_message_content(ArgT0&& arg0, ArgT... args) {
 
 grpc_message_content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flwr.proto.MessageContainer.grpc_message_content)
}
inline std::string* MessageContainer::mutable_grpc_message_content() {
  std::string* _s = _internal_mutable_grpc_message_content();
  // @@protoc_insertion_point(field_mutable:flwr.proto.MessageContainer.grpc_message_content)
  return _s;
}
inline const std::string& MessageContainer::_internal_grpc_message_content() const {
  return grpc_message_content_.Get();
}
inline void MessageContainer::_internal_set_grpc_message_content(const std::string& value) {
  
  grpc_message_content_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageContainer::_internal_mutable_grpc_message_content() {
  
  return grpc_message_content_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageContainer::release_grpc_message_content() {
  // @@protoc_insertion_point(field_release:flwr.proto.MessageContainer.grpc_message_content)
  return grpc_message_content_.Release();
}
inline void MessageContainer::set_allocated_grpc_message_content(std::string* grpc_message_content) {
  if (grpc_message_content != nullptr) {
    
  } else {
    
  }
  grpc_message_content_.SetAllocated(grpc_message_content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (grpc_message_content_.IsDefault()) {
    grpc_message_content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flwr.proto.MessageContainer.grpc_message_content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace flwr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flwr_2fproto_2fgrpcadapter_2eproto

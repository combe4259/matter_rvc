// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flwr/proto/control.proto

#include "flwr/proto/control.pb.h"
#include "flwr/proto/control.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flwr {
namespace proto {

static const char* Control_method_names[] = {
  "/flwr.proto.Control/CreateRun",
  "/flwr.proto.Control/GetRunStatus",
  "/flwr.proto.Control/UpdateRunStatus",
};

std::unique_ptr< Control::Stub> Control::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Control::Stub> stub(new Control::Stub(channel, options));
  return stub;
}

Control::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateRun_(Control_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRunStatus_(Control_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRunStatus_(Control_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Control::Stub::CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::flwr::proto::CreateRunResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRun_, context, request, response);
}

void Control::Stub::async::CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRun_, context, request, response, std::move(f));
}

void Control::Stub::async::CreateRun(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRun_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>* Control::Stub::PrepareAsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::CreateRunResponse, ::flwr::proto::CreateRunRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRun_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::CreateRunResponse>* Control::Stub::AsyncCreateRunRaw(::grpc::ClientContext* context, const ::flwr::proto::CreateRunRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRunRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Control::Stub::GetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::flwr::proto::GetRunStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::GetRunStatusRequest, ::flwr::proto::GetRunStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRunStatus_, context, request, response);
}

void Control::Stub::async::GetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest* request, ::flwr::proto::GetRunStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::GetRunStatusRequest, ::flwr::proto::GetRunStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRunStatus_, context, request, response, std::move(f));
}

void Control::Stub::async::GetRunStatus(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest* request, ::flwr::proto::GetRunStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRunStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunStatusResponse>* Control::Stub::PrepareAsyncGetRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::GetRunStatusResponse, ::flwr::proto::GetRunStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRunStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::GetRunStatusResponse>* Control::Stub::AsyncGetRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::GetRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRunStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Control::Stub::UpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::flwr::proto::UpdateRunStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::flwr::proto::UpdateRunStatusRequest, ::flwr::proto::UpdateRunStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRunStatus_, context, request, response);
}

void Control::Stub::async::UpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest* request, ::flwr::proto::UpdateRunStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::flwr::proto::UpdateRunStatusRequest, ::flwr::proto::UpdateRunStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRunStatus_, context, request, response, std::move(f));
}

void Control::Stub::async::UpdateRunStatus(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest* request, ::flwr::proto::UpdateRunStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRunStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::UpdateRunStatusResponse>* Control::Stub::PrepareAsyncUpdateRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::flwr::proto::UpdateRunStatusResponse, ::flwr::proto::UpdateRunStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRunStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::flwr::proto::UpdateRunStatusResponse>* Control::Stub::AsyncUpdateRunStatusRaw(::grpc::ClientContext* context, const ::flwr::proto::UpdateRunStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRunStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

Control::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::flwr::proto::CreateRunRequest, ::flwr::proto::CreateRunResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Control::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::CreateRunRequest* req,
             ::flwr::proto::CreateRunResponse* resp) {
               return service->CreateRun(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::flwr::proto::GetRunStatusRequest, ::flwr::proto::GetRunStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Control::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::GetRunStatusRequest* req,
             ::flwr::proto::GetRunStatusResponse* resp) {
               return service->GetRunStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::flwr::proto::UpdateRunStatusRequest, ::flwr::proto::UpdateRunStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Control::Service* service,
             ::grpc::ServerContext* ctx,
             const ::flwr::proto::UpdateRunStatusRequest* req,
             ::flwr::proto::UpdateRunStatusResponse* resp) {
               return service->UpdateRunStatus(ctx, req, resp);
             }, this)));
}

Control::Service::~Service() {
}

::grpc::Status Control::Service::CreateRun(::grpc::ServerContext* context, const ::flwr::proto::CreateRunRequest* request, ::flwr::proto::CreateRunResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetRunStatus(::grpc::ServerContext* context, const ::flwr::proto::GetRunStatusRequest* request, ::flwr::proto::GetRunStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::UpdateRunStatus(::grpc::ServerContext* context, const ::flwr::proto::UpdateRunStatusRequest* request, ::flwr::proto::UpdateRunStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flwr
}  // namespace proto


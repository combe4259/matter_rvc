// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flwr/proto/run.proto

#include "flwr/proto/run.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace flwr {
namespace proto {
PROTOBUF_CONSTEXPR Run_OverrideConfigEntry_DoNotUse::Run_OverrideConfigEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Run_OverrideConfigEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Run_OverrideConfigEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Run_OverrideConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Run_OverrideConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Run_OverrideConfigEntry_DoNotUseDefaultTypeInternal _Run_OverrideConfigEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Run::Run(
    ::_pbi::ConstantInitialized)
  : override_config_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , fab_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fab_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fab_hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , run_id_(uint64_t{0u}){}
struct RunDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunDefaultTypeInternal() {}
  union {
    Run _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunDefaultTypeInternal _Run_default_instance_;
PROTOBUF_CONSTEXPR RunStatus::RunStatus(
    ::_pbi::ConstantInitialized)
  : status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sub_status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , details_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct RunStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunStatusDefaultTypeInternal() {}
  union {
    RunStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunStatusDefaultTypeInternal _RunStatus_default_instance_;
PROTOBUF_CONSTEXPR CreateRunRequest_OverrideConfigEntry_DoNotUse::CreateRunRequest_OverrideConfigEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct CreateRunRequest_OverrideConfigEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRunRequest_OverrideConfigEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRunRequest_OverrideConfigEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateRunRequest_OverrideConfigEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRunRequest_OverrideConfigEntry_DoNotUseDefaultTypeInternal _CreateRunRequest_OverrideConfigEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CreateRunRequest::CreateRunRequest(
    ::_pbi::ConstantInitialized)
  : override_config_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , fab_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fab_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fab_(nullptr){}
struct CreateRunRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRunRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRunRequestDefaultTypeInternal() {}
  union {
    CreateRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRunRequestDefaultTypeInternal _CreateRunRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateRunResponse::CreateRunResponse(
    ::_pbi::ConstantInitialized)
  : run_id_(uint64_t{0u}){}
struct CreateRunResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRunResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRunResponseDefaultTypeInternal() {}
  union {
    CreateRunResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRunResponseDefaultTypeInternal _CreateRunResponse_default_instance_;
PROTOBUF_CONSTEXPR GetRunRequest::GetRunRequest(
    ::_pbi::ConstantInitialized)
  : node_(nullptr)
  , run_id_(uint64_t{0u}){}
struct GetRunRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRunRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRunRequestDefaultTypeInternal() {}
  union {
    GetRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRunRequestDefaultTypeInternal _GetRunRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRunResponse::GetRunResponse(
    ::_pbi::ConstantInitialized)
  : run_(nullptr){}
struct GetRunResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRunResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRunResponseDefaultTypeInternal() {}
  union {
    GetRunResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRunResponseDefaultTypeInternal _GetRunResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateRunStatusRequest::UpdateRunStatusRequest(
    ::_pbi::ConstantInitialized)
  : run_status_(nullptr)
  , run_id_(uint64_t{0u}){}
struct UpdateRunStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateRunStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateRunStatusRequestDefaultTypeInternal() {}
  union {
    UpdateRunStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateRunStatusRequestDefaultTypeInternal _UpdateRunStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateRunStatusResponse::UpdateRunStatusResponse(
    ::_pbi::ConstantInitialized){}
struct UpdateRunStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateRunStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateRunStatusResponseDefaultTypeInternal() {}
  union {
    UpdateRunStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateRunStatusResponseDefaultTypeInternal _UpdateRunStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR GetRunStatusRequest::GetRunStatusRequest(
    ::_pbi::ConstantInitialized)
  : run_ids_()
  , _run_ids_cached_byte_size_(0)
  , node_(nullptr){}
struct GetRunStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRunStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRunStatusRequestDefaultTypeInternal() {}
  union {
    GetRunStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRunStatusRequestDefaultTypeInternal _GetRunStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRunStatusResponse_RunStatusDictEntry_DoNotUse::GetRunStatusResponse_RunStatusDictEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct GetRunStatusResponse_RunStatusDictEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRunStatusResponse_RunStatusDictEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRunStatusResponse_RunStatusDictEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetRunStatusResponse_RunStatusDictEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRunStatusResponse_RunStatusDictEntry_DoNotUseDefaultTypeInternal _GetRunStatusResponse_RunStatusDictEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetRunStatusResponse::GetRunStatusResponse(
    ::_pbi::ConstantInitialized)
  : run_status_dict_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct GetRunStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRunStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRunStatusResponseDefaultTypeInternal() {}
  union {
    GetRunStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRunStatusResponseDefaultTypeInternal _GetRunStatusResponse_default_instance_;
}  // namespace proto
}  // namespace flwr
static ::_pb::Metadata file_level_metadata_flwr_2fproto_2frun_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_flwr_2fproto_2frun_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_flwr_2fproto_2frun_2eproto = nullptr;

const uint32_t TableStruct_flwr_2fproto_2frun_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Run_OverrideConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Run_OverrideConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Run_OverrideConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Run_OverrideConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Run, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Run, run_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Run, fab_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Run, fab_version_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Run, override_config_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::Run, fab_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RunStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RunStatus, status_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RunStatus, sub_status_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::RunStatus, details_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunRequest_OverrideConfigEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunRequest_OverrideConfigEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunRequest_OverrideConfigEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunRequest_OverrideConfigEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunRequest, fab_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunRequest, fab_version_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunRequest, override_config_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunRequest, fab_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::CreateRunResponse, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunRequest, node_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunRequest, run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunResponse, run_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::UpdateRunStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::UpdateRunStatusRequest, run_id_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::UpdateRunStatusRequest, run_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::UpdateRunStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunStatusRequest, node_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunStatusRequest, run_ids_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunStatusResponse_RunStatusDictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunStatusResponse_RunStatusDictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunStatusResponse_RunStatusDictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunStatusResponse_RunStatusDictEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flwr::proto::GetRunStatusResponse, run_status_dict_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::flwr::proto::Run_OverrideConfigEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::flwr::proto::Run)},
  { 21, -1, -1, sizeof(::flwr::proto::RunStatus)},
  { 30, 38, -1, sizeof(::flwr::proto::CreateRunRequest_OverrideConfigEntry_DoNotUse)},
  { 40, -1, -1, sizeof(::flwr::proto::CreateRunRequest)},
  { 50, -1, -1, sizeof(::flwr::proto::CreateRunResponse)},
  { 57, -1, -1, sizeof(::flwr::proto::GetRunRequest)},
  { 65, -1, -1, sizeof(::flwr::proto::GetRunResponse)},
  { 72, -1, -1, sizeof(::flwr::proto::UpdateRunStatusRequest)},
  { 80, -1, -1, sizeof(::flwr::proto::UpdateRunStatusResponse)},
  { 86, -1, -1, sizeof(::flwr::proto::GetRunStatusRequest)},
  { 94, 102, -1, sizeof(::flwr::proto::GetRunStatusResponse_RunStatusDictEntry_DoNotUse)},
  { 104, -1, -1, sizeof(::flwr::proto::GetRunStatusResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::flwr::proto::_Run_OverrideConfigEntry_DoNotUse_default_instance_._instance,
  &::flwr::proto::_Run_default_instance_._instance,
  &::flwr::proto::_RunStatus_default_instance_._instance,
  &::flwr::proto::_CreateRunRequest_OverrideConfigEntry_DoNotUse_default_instance_._instance,
  &::flwr::proto::_CreateRunRequest_default_instance_._instance,
  &::flwr::proto::_CreateRunResponse_default_instance_._instance,
  &::flwr::proto::_GetRunRequest_default_instance_._instance,
  &::flwr::proto::_GetRunResponse_default_instance_._instance,
  &::flwr::proto::_UpdateRunStatusRequest_default_instance_._instance,
  &::flwr::proto::_UpdateRunStatusResponse_default_instance_._instance,
  &::flwr::proto::_GetRunStatusRequest_default_instance_._instance,
  &::flwr::proto::_GetRunStatusResponse_RunStatusDictEntry_DoNotUse_default_instance_._instance,
  &::flwr::proto::_GetRunStatusResponse_default_instance_._instance,
};

const char descriptor_table_protodef_flwr_2fproto_2frun_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024flwr/proto/run.proto\022\nflwr.proto\032\024flwr"
  "/proto/fab.proto\032\025flwr/proto/node.proto\032"
  "\032flwr/proto/transport.proto\"\325\001\n\003Run\022\016\n\006r"
  "un_id\030\001 \001(\004\022\016\n\006fab_id\030\002 \001(\t\022\023\n\013fab_versi"
  "on\030\003 \001(\t\022<\n\017override_config\030\004 \003(\0132#.flwr"
  ".proto.Run.OverrideConfigEntry\022\020\n\010fab_ha"
  "sh\030\005 \001(\t\032I\n\023OverrideConfigEntry\022\013\n\003key\030\001"
  " \001(\t\022!\n\005value\030\002 \001(\0132\022.flwr.proto.Scalar:"
  "\0028\001\"@\n\tRunStatus\022\016\n\006status\030\001 \001(\t\022\022\n\nsub_"
  "status\030\002 \001(\t\022\017\n\007details\030\003 \001(\t\"\353\001\n\020Create"
  "RunRequest\022\016\n\006fab_id\030\001 \001(\t\022\023\n\013fab_versio"
  "n\030\002 \001(\t\022I\n\017override_config\030\003 \003(\01320.flwr."
  "proto.CreateRunRequest.OverrideConfigEnt"
  "ry\022\034\n\003fab\030\004 \001(\0132\017.flwr.proto.Fab\032I\n\023Over"
  "rideConfigEntry\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 "
  "\001(\0132\022.flwr.proto.Scalar:\0028\001\"#\n\021CreateRun"
  "Response\022\016\n\006run_id\030\001 \001(\004\"\?\n\rGetRunReques"
  "t\022\036\n\004node\030\001 \001(\0132\020.flwr.proto.Node\022\016\n\006run"
  "_id\030\002 \001(\004\".\n\016GetRunResponse\022\034\n\003run\030\001 \001(\013"
  "2\017.flwr.proto.Run\"S\n\026UpdateRunStatusRequ"
  "est\022\016\n\006run_id\030\001 \001(\004\022)\n\nrun_status\030\002 \001(\0132"
  "\025.flwr.proto.RunStatus\"\031\n\027UpdateRunStatu"
  "sResponse\"F\n\023GetRunStatusRequest\022\036\n\004node"
  "\030\001 \001(\0132\020.flwr.proto.Node\022\017\n\007run_ids\030\002 \003("
  "\004\"\261\001\n\024GetRunStatusResponse\022L\n\017run_status"
  "_dict\030\001 \003(\01323.flwr.proto.GetRunStatusRes"
  "ponse.RunStatusDictEntry\032K\n\022RunStatusDic"
  "tEntry\022\013\n\003key\030\001 \001(\004\022$\n\005value\030\002 \001(\0132\025.flw"
  "r.proto.RunStatus:\0028\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_flwr_2fproto_2frun_2eproto_deps[3] = {
  &::descriptor_table_flwr_2fproto_2ffab_2eproto,
  &::descriptor_table_flwr_2fproto_2fnode_2eproto,
  &::descriptor_table_flwr_2fproto_2ftransport_2eproto,
};
static ::_pbi::once_flag descriptor_table_flwr_2fproto_2frun_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_flwr_2fproto_2frun_2eproto = {
    false, false, 1149, descriptor_table_protodef_flwr_2fproto_2frun_2eproto,
    "flwr/proto/run.proto",
    &descriptor_table_flwr_2fproto_2frun_2eproto_once, descriptor_table_flwr_2fproto_2frun_2eproto_deps, 3, 13,
    schemas, file_default_instances, TableStruct_flwr_2fproto_2frun_2eproto::offsets,
    file_level_metadata_flwr_2fproto_2frun_2eproto, file_level_enum_descriptors_flwr_2fproto_2frun_2eproto,
    file_level_service_descriptors_flwr_2fproto_2frun_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_flwr_2fproto_2frun_2eproto_getter() {
  return &descriptor_table_flwr_2fproto_2frun_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_flwr_2fproto_2frun_2eproto(&descriptor_table_flwr_2fproto_2frun_2eproto);
namespace flwr {
namespace proto {

// ===================================================================

Run_OverrideConfigEntry_DoNotUse::Run_OverrideConfigEntry_DoNotUse() {}
Run_OverrideConfigEntry_DoNotUse::Run_OverrideConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Run_OverrideConfigEntry_DoNotUse::MergeFrom(const Run_OverrideConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Run_OverrideConfigEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[0]);
}

// ===================================================================

class Run::_Internal {
 public:
};

void Run::clear_override_config() {
  override_config_.Clear();
}
Run::Run(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  override_config_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Run::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.Run)
}
Run::Run(const Run& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  override_config_.MergeFrom(from.override_config_);
  fab_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fab_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fab_id().empty()) {
    fab_id_.Set(from._internal_fab_id(), 
      GetArenaForAllocation());
  }
  fab_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fab_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fab_version().empty()) {
    fab_version_.Set(from._internal_fab_version(), 
      GetArenaForAllocation());
  }
  fab_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fab_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fab_hash().empty()) {
    fab_hash_.Set(from._internal_fab_hash(), 
      GetArenaForAllocation());
  }
  run_id_ = from.run_id_;
  // @@protoc_insertion_point(copy_constructor:flwr.proto.Run)
}

inline void Run::SharedCtor() {
fab_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fab_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fab_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fab_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fab_hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fab_hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
run_id_ = uint64_t{0u};
}

Run::~Run() {
  // @@protoc_insertion_point(destructor:flwr.proto.Run)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Run::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  override_config_.Destruct();
  fab_id_.Destroy();
  fab_version_.Destroy();
  fab_hash_.Destroy();
}

void Run::ArenaDtor(void* object) {
  Run* _this = reinterpret_cast< Run* >(object);
  _this->override_config_.Destruct();
}
void Run::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Run::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.Run)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  override_config_.Clear();
  fab_id_.ClearToEmpty();
  fab_version_.ClearToEmpty();
  fab_hash_.ClearToEmpty();
  run_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Run::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fab_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fab_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.Run.fab_id"));
        } else
          goto handle_unusual;
        continue;
      // string fab_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_fab_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.Run.fab_version"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .flwr.proto.Scalar> override_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&override_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string fab_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fab_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.Run.fab_hash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Run::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.Run)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_run_id(), target);
  }

  // string fab_id = 2;
  if (!this->_internal_fab_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fab_id().data(), static_cast<int>(this->_internal_fab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.Run.fab_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fab_id(), target);
  }

  // string fab_version = 3;
  if (!this->_internal_fab_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fab_version().data(), static_cast<int>(this->_internal_fab_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.Run.fab_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fab_version(), target);
  }

  // map<string, .flwr.proto.Scalar> override_config = 4;
  if (!this->_internal_override_config().empty()) {
    using MapType = ::_pb::Map<std::string, ::flwr::proto::Scalar>;
    using WireHelper = Run_OverrideConfigEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_override_config();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "flwr.proto.Run.OverrideConfigEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string fab_hash = 5;
  if (!this->_internal_fab_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fab_hash().data(), static_cast<int>(this->_internal_fab_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.Run.fab_hash");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fab_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.Run)
  return target;
}

size_t Run::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.Run)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flwr.proto.Scalar> override_config = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_override_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_iterator
      it = this->_internal_override_config().begin();
      it != this->_internal_override_config().end(); ++it) {
    total_size += Run_OverrideConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string fab_id = 2;
  if (!this->_internal_fab_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fab_id());
  }

  // string fab_version = 3;
  if (!this->_internal_fab_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fab_version());
  }

  // string fab_hash = 5;
  if (!this->_internal_fab_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fab_hash());
  }

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Run::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Run::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Run::GetClassData() const { return &_class_data_; }

void Run::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Run *>(to)->MergeFrom(
      static_cast<const Run &>(from));
}


void Run::MergeFrom(const Run& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.Run)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  override_config_.MergeFrom(from.override_config_);
  if (!from._internal_fab_id().empty()) {
    _internal_set_fab_id(from._internal_fab_id());
  }
  if (!from._internal_fab_version().empty()) {
    _internal_set_fab_version(from._internal_fab_version());
  }
  if (!from._internal_fab_hash().empty()) {
    _internal_set_fab_hash(from._internal_fab_hash());
  }
  if (from._internal_run_id() != 0) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Run::CopyFrom(const Run& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.Run)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Run::IsInitialized() const {
  return true;
}

void Run::InternalSwap(Run* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  override_config_.InternalSwap(&other->override_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fab_id_, lhs_arena,
      &other->fab_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fab_version_, lhs_arena,
      &other->fab_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fab_hash_, lhs_arena,
      &other->fab_hash_, rhs_arena
  );
  swap(run_id_, other->run_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Run::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[1]);
}

// ===================================================================

class RunStatus::_Internal {
 public:
};

RunStatus::RunStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.RunStatus)
}
RunStatus::RunStatus(const RunStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  sub_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sub_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sub_status().empty()) {
    sub_status_.Set(from._internal_sub_status(), 
      GetArenaForAllocation());
  }
  details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    details_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    details_.Set(from._internal_details(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.RunStatus)
}

inline void RunStatus::SharedCtor() {
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sub_status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sub_status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
details_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  details_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunStatus::~RunStatus() {
  // @@protoc_insertion_point(destructor:flwr.proto.RunStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.Destroy();
  sub_status_.Destroy();
  details_.Destroy();
}

void RunStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RunStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.RunStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  sub_status_.ClearToEmpty();
  details_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.RunStatus.status"));
        } else
          goto handle_unusual;
        continue;
      // string sub_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sub_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.RunStatus.sub_status"));
        } else
          goto handle_unusual;
        continue;
      // string details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.RunStatus.details"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.RunStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.RunStatus.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // string sub_status = 2;
  if (!this->_internal_sub_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_status().data(), static_cast<int>(this->_internal_sub_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.RunStatus.sub_status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sub_status(), target);
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_details().data(), static_cast<int>(this->_internal_details().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.RunStatus.details");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_details(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.RunStatus)
  return target;
}

size_t RunStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.RunStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string sub_status = 2;
  if (!this->_internal_sub_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_status());
  }

  // string details = 3;
  if (!this->_internal_details().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_details());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RunStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunStatus::GetClassData() const { return &_class_data_; }

void RunStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RunStatus *>(to)->MergeFrom(
      static_cast<const RunStatus &>(from));
}


void RunStatus::MergeFrom(const RunStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.RunStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (!from._internal_sub_status().empty()) {
    _internal_set_sub_status(from._internal_sub_status());
  }
  if (!from._internal_details().empty()) {
    _internal_set_details(from._internal_details());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunStatus::CopyFrom(const RunStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.RunStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStatus::IsInitialized() const {
  return true;
}

void RunStatus::InternalSwap(RunStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sub_status_, lhs_arena,
      &other->sub_status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &details_, lhs_arena,
      &other->details_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RunStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[2]);
}

// ===================================================================

CreateRunRequest_OverrideConfigEntry_DoNotUse::CreateRunRequest_OverrideConfigEntry_DoNotUse() {}
CreateRunRequest_OverrideConfigEntry_DoNotUse::CreateRunRequest_OverrideConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateRunRequest_OverrideConfigEntry_DoNotUse::MergeFrom(const CreateRunRequest_OverrideConfigEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateRunRequest_OverrideConfigEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[3]);
}

// ===================================================================

class CreateRunRequest::_Internal {
 public:
  static const ::flwr::proto::Fab& fab(const CreateRunRequest* msg);
};

const ::flwr::proto::Fab&
CreateRunRequest::_Internal::fab(const CreateRunRequest* msg) {
  return *msg->fab_;
}
void CreateRunRequest::clear_override_config() {
  override_config_.Clear();
}
void CreateRunRequest::clear_fab() {
  if (GetArenaForAllocation() == nullptr && fab_ != nullptr) {
    delete fab_;
  }
  fab_ = nullptr;
}
CreateRunRequest::CreateRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  override_config_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CreateRunRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.CreateRunRequest)
}
CreateRunRequest::CreateRunRequest(const CreateRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  override_config_.MergeFrom(from.override_config_);
  fab_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fab_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fab_id().empty()) {
    fab_id_.Set(from._internal_fab_id(), 
      GetArenaForAllocation());
  }
  fab_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fab_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fab_version().empty()) {
    fab_version_.Set(from._internal_fab_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_fab()) {
    fab_ = new ::flwr::proto::Fab(*from.fab_);
  } else {
    fab_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.CreateRunRequest)
}

inline void CreateRunRequest::SharedCtor() {
fab_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fab_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fab_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fab_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fab_ = nullptr;
}

CreateRunRequest::~CreateRunRequest() {
  // @@protoc_insertion_point(destructor:flwr.proto.CreateRunRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CreateRunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  override_config_.Destruct();
  fab_id_.Destroy();
  fab_version_.Destroy();
  if (this != internal_default_instance()) delete fab_;
}

void CreateRunRequest::ArenaDtor(void* object) {
  CreateRunRequest* _this = reinterpret_cast< CreateRunRequest* >(object);
  _this->override_config_.Destruct();
}
void CreateRunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.CreateRunRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  override_config_.Clear();
  fab_id_.ClearToEmpty();
  fab_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && fab_ != nullptr) {
    delete fab_;
  }
  fab_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRunRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fab_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fab_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.CreateRunRequest.fab_id"));
        } else
          goto handle_unusual;
        continue;
      // string fab_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fab_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "flwr.proto.CreateRunRequest.fab_version"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .flwr.proto.Scalar> override_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&override_config_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.Fab fab = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fab(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRunRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.CreateRunRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fab_id = 1;
  if (!this->_internal_fab_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fab_id().data(), static_cast<int>(this->_internal_fab_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.CreateRunRequest.fab_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fab_id(), target);
  }

  // string fab_version = 2;
  if (!this->_internal_fab_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fab_version().data(), static_cast<int>(this->_internal_fab_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flwr.proto.CreateRunRequest.fab_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fab_version(), target);
  }

  // map<string, .flwr.proto.Scalar> override_config = 3;
  if (!this->_internal_override_config().empty()) {
    using MapType = ::_pb::Map<std::string, ::flwr::proto::Scalar>;
    using WireHelper = CreateRunRequest_OverrideConfigEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_override_config();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "flwr.proto.CreateRunRequest.OverrideConfigEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .flwr.proto.Fab fab = 4;
  if (this->_internal_has_fab()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fab(this),
        _Internal::fab(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.CreateRunRequest)
  return target;
}

size_t CreateRunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.CreateRunRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flwr.proto.Scalar> override_config = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_override_config_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flwr::proto::Scalar >::const_iterator
      it = this->_internal_override_config().begin();
      it != this->_internal_override_config().end(); ++it) {
    total_size += CreateRunRequest_OverrideConfigEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string fab_id = 1;
  if (!this->_internal_fab_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fab_id());
  }

  // string fab_version = 2;
  if (!this->_internal_fab_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fab_version());
  }

  // .flwr.proto.Fab fab = 4;
  if (this->_internal_has_fab()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fab_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRunRequest::GetClassData() const { return &_class_data_; }

void CreateRunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateRunRequest *>(to)->MergeFrom(
      static_cast<const CreateRunRequest &>(from));
}


void CreateRunRequest::MergeFrom(const CreateRunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.CreateRunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  override_config_.MergeFrom(from.override_config_);
  if (!from._internal_fab_id().empty()) {
    _internal_set_fab_id(from._internal_fab_id());
  }
  if (!from._internal_fab_version().empty()) {
    _internal_set_fab_version(from._internal_fab_version());
  }
  if (from._internal_has_fab()) {
    _internal_mutable_fab()->::flwr::proto::Fab::MergeFrom(from._internal_fab());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRunRequest::CopyFrom(const CreateRunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.CreateRunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRunRequest::IsInitialized() const {
  return true;
}

void CreateRunRequest::InternalSwap(CreateRunRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  override_config_.InternalSwap(&other->override_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fab_id_, lhs_arena,
      &other->fab_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fab_version_, lhs_arena,
      &other->fab_version_, rhs_arena
  );
  swap(fab_, other->fab_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRunRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[4]);
}

// ===================================================================

class CreateRunResponse::_Internal {
 public:
};

CreateRunResponse::CreateRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.CreateRunResponse)
}
CreateRunResponse::CreateRunResponse(const CreateRunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_id_ = from.run_id_;
  // @@protoc_insertion_point(copy_constructor:flwr.proto.CreateRunResponse)
}

inline void CreateRunResponse::SharedCtor() {
run_id_ = uint64_t{0u};
}

CreateRunResponse::~CreateRunResponse() {
  // @@protoc_insertion_point(destructor:flwr.proto.CreateRunResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRunResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateRunResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.CreateRunResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRunResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRunResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.CreateRunResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.CreateRunResponse)
  return target;
}

size_t CreateRunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.CreateRunResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRunResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRunResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRunResponse::GetClassData() const { return &_class_data_; }

void CreateRunResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateRunResponse *>(to)->MergeFrom(
      static_cast<const CreateRunResponse &>(from));
}


void CreateRunResponse::MergeFrom(const CreateRunResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.CreateRunResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_run_id() != 0) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRunResponse::CopyFrom(const CreateRunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.CreateRunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRunResponse::IsInitialized() const {
  return true;
}

void CreateRunResponse::InternalSwap(CreateRunResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(run_id_, other->run_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRunResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[5]);
}

// ===================================================================

class GetRunRequest::_Internal {
 public:
  static const ::flwr::proto::Node& node(const GetRunRequest* msg);
};

const ::flwr::proto::Node&
GetRunRequest::_Internal::node(const GetRunRequest* msg) {
  return *msg->node_;
}
void GetRunRequest::clear_node() {
  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
GetRunRequest::GetRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.GetRunRequest)
}
GetRunRequest::GetRunRequest(const GetRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::flwr::proto::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  run_id_ = from.run_id_;
  // @@protoc_insertion_point(copy_constructor:flwr.proto.GetRunRequest)
}

inline void GetRunRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&run_id_) -
    reinterpret_cast<char*>(&node_)) + sizeof(run_id_));
}

GetRunRequest::~GetRunRequest() {
  // @@protoc_insertion_point(destructor:flwr.proto.GetRunRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete node_;
}

void GetRunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.GetRunRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  run_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRunRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flwr.proto.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 run_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRunRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.GetRunRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .flwr.proto.Node node = 1;
  if (this->_internal_has_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::node(this),
        _Internal::node(this).GetCachedSize(), target, stream);
  }

  // uint64 run_id = 2;
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.GetRunRequest)
  return target;
}

size_t GetRunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.GetRunRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flwr.proto.Node node = 1;
  if (this->_internal_has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  // uint64 run_id = 2;
  if (this->_internal_run_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRunRequest::GetClassData() const { return &_class_data_; }

void GetRunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRunRequest *>(to)->MergeFrom(
      static_cast<const GetRunRequest &>(from));
}


void GetRunRequest::MergeFrom(const GetRunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.GetRunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_node()) {
    _internal_mutable_node()->::flwr::proto::Node::MergeFrom(from._internal_node());
  }
  if (from._internal_run_id() != 0) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRunRequest::CopyFrom(const GetRunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.GetRunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRunRequest::IsInitialized() const {
  return true;
}

void GetRunRequest::InternalSwap(GetRunRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRunRequest, run_id_)
      + sizeof(GetRunRequest::run_id_)
      - PROTOBUF_FIELD_OFFSET(GetRunRequest, node_)>(
          reinterpret_cast<char*>(&node_),
          reinterpret_cast<char*>(&other->node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRunRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[6]);
}

// ===================================================================

class GetRunResponse::_Internal {
 public:
  static const ::flwr::proto::Run& run(const GetRunResponse* msg);
};

const ::flwr::proto::Run&
GetRunResponse::_Internal::run(const GetRunResponse* msg) {
  return *msg->run_;
}
GetRunResponse::GetRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.GetRunResponse)
}
GetRunResponse::GetRunResponse(const GetRunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_run()) {
    run_ = new ::flwr::proto::Run(*from.run_);
  } else {
    run_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.GetRunResponse)
}

inline void GetRunResponse::SharedCtor() {
run_ = nullptr;
}

GetRunResponse::~GetRunResponse() {
  // @@protoc_insertion_point(destructor:flwr.proto.GetRunResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRunResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete run_;
}

void GetRunResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.GetRunResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && run_ != nullptr) {
    delete run_;
  }
  run_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRunResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flwr.proto.Run run = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_run(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRunResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.GetRunResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .flwr.proto.Run run = 1;
  if (this->_internal_has_run()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::run(this),
        _Internal::run(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.GetRunResponse)
  return target;
}

size_t GetRunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.GetRunResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flwr.proto.Run run = 1;
  if (this->_internal_has_run()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRunResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRunResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRunResponse::GetClassData() const { return &_class_data_; }

void GetRunResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRunResponse *>(to)->MergeFrom(
      static_cast<const GetRunResponse &>(from));
}


void GetRunResponse::MergeFrom(const GetRunResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.GetRunResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_run()) {
    _internal_mutable_run()->::flwr::proto::Run::MergeFrom(from._internal_run());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRunResponse::CopyFrom(const GetRunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.GetRunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRunResponse::IsInitialized() const {
  return true;
}

void GetRunResponse::InternalSwap(GetRunResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(run_, other->run_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRunResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[7]);
}

// ===================================================================

class UpdateRunStatusRequest::_Internal {
 public:
  static const ::flwr::proto::RunStatus& run_status(const UpdateRunStatusRequest* msg);
};

const ::flwr::proto::RunStatus&
UpdateRunStatusRequest::_Internal::run_status(const UpdateRunStatusRequest* msg) {
  return *msg->run_status_;
}
UpdateRunStatusRequest::UpdateRunStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.UpdateRunStatusRequest)
}
UpdateRunStatusRequest::UpdateRunStatusRequest(const UpdateRunStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_run_status()) {
    run_status_ = new ::flwr::proto::RunStatus(*from.run_status_);
  } else {
    run_status_ = nullptr;
  }
  run_id_ = from.run_id_;
  // @@protoc_insertion_point(copy_constructor:flwr.proto.UpdateRunStatusRequest)
}

inline void UpdateRunStatusRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&run_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&run_id_) -
    reinterpret_cast<char*>(&run_status_)) + sizeof(run_id_));
}

UpdateRunStatusRequest::~UpdateRunStatusRequest() {
  // @@protoc_insertion_point(destructor:flwr.proto.UpdateRunStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateRunStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete run_status_;
}

void UpdateRunStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateRunStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.UpdateRunStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && run_status_ != nullptr) {
    delete run_status_;
  }
  run_status_ = nullptr;
  run_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRunStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 run_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          run_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .flwr.proto.RunStatus run_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateRunStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.UpdateRunStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_run_id(), target);
  }

  // .flwr.proto.RunStatus run_status = 2;
  if (this->_internal_has_run_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::run_status(this),
        _Internal::run_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.UpdateRunStatusRequest)
  return target;
}

size_t UpdateRunStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.UpdateRunStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flwr.proto.RunStatus run_status = 2;
  if (this->_internal_has_run_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *run_status_);
  }

  // uint64 run_id = 1;
  if (this->_internal_run_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRunStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateRunStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRunStatusRequest::GetClassData() const { return &_class_data_; }

void UpdateRunStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateRunStatusRequest *>(to)->MergeFrom(
      static_cast<const UpdateRunStatusRequest &>(from));
}


void UpdateRunStatusRequest::MergeFrom(const UpdateRunStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.UpdateRunStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_run_status()) {
    _internal_mutable_run_status()->::flwr::proto::RunStatus::MergeFrom(from._internal_run_status());
  }
  if (from._internal_run_id() != 0) {
    _internal_set_run_id(from._internal_run_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRunStatusRequest::CopyFrom(const UpdateRunStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.UpdateRunStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRunStatusRequest::IsInitialized() const {
  return true;
}

void UpdateRunStatusRequest::InternalSwap(UpdateRunStatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateRunStatusRequest, run_id_)
      + sizeof(UpdateRunStatusRequest::run_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateRunStatusRequest, run_status_)>(
          reinterpret_cast<char*>(&run_status_),
          reinterpret_cast<char*>(&other->run_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRunStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[8]);
}

// ===================================================================

class UpdateRunStatusResponse::_Internal {
 public:
};

UpdateRunStatusResponse::UpdateRunStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flwr.proto.UpdateRunStatusResponse)
}
UpdateRunStatusResponse::UpdateRunStatusResponse(const UpdateRunStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.UpdateRunStatusResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRunStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRunStatusResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UpdateRunStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[9]);
}

// ===================================================================

class GetRunStatusRequest::_Internal {
 public:
  static const ::flwr::proto::Node& node(const GetRunStatusRequest* msg);
};

const ::flwr::proto::Node&
GetRunStatusRequest::_Internal::node(const GetRunStatusRequest* msg) {
  return *msg->node_;
}
void GetRunStatusRequest::clear_node() {
  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
GetRunStatusRequest::GetRunStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  run_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:flwr.proto.GetRunStatusRequest)
}
GetRunStatusRequest::GetRunStatusRequest(const GetRunStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      run_ids_(from.run_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::flwr::proto::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flwr.proto.GetRunStatusRequest)
}

inline void GetRunStatusRequest::SharedCtor() {
node_ = nullptr;
}

GetRunStatusRequest::~GetRunStatusRequest() {
  // @@protoc_insertion_point(destructor:flwr.proto.GetRunStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRunStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete node_;
}

void GetRunStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRunStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.GetRunStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRunStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .flwr.proto.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 run_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_run_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_run_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRunStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.GetRunStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .flwr.proto.Node node = 1;
  if (this->_internal_has_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::node(this),
        _Internal::node(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 run_ids = 2;
  {
    int byte_size = _run_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_run_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.GetRunStatusRequest)
  return target;
}

size_t GetRunStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.GetRunStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 run_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->run_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _run_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .flwr.proto.Node node = 1;
  if (this->_internal_has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRunStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRunStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRunStatusRequest::GetClassData() const { return &_class_data_; }

void GetRunStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRunStatusRequest *>(to)->MergeFrom(
      static_cast<const GetRunStatusRequest &>(from));
}


void GetRunStatusRequest::MergeFrom(const GetRunStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.GetRunStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  run_ids_.MergeFrom(from.run_ids_);
  if (from._internal_has_node()) {
    _internal_mutable_node()->::flwr::proto::Node::MergeFrom(from._internal_node());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRunStatusRequest::CopyFrom(const GetRunStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.GetRunStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRunStatusRequest::IsInitialized() const {
  return true;
}

void GetRunStatusRequest::InternalSwap(GetRunStatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  run_ids_.InternalSwap(&other->run_ids_);
  swap(node_, other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRunStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[10]);
}

// ===================================================================

GetRunStatusResponse_RunStatusDictEntry_DoNotUse::GetRunStatusResponse_RunStatusDictEntry_DoNotUse() {}
GetRunStatusResponse_RunStatusDictEntry_DoNotUse::GetRunStatusResponse_RunStatusDictEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetRunStatusResponse_RunStatusDictEntry_DoNotUse::MergeFrom(const GetRunStatusResponse_RunStatusDictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetRunStatusResponse_RunStatusDictEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[11]);
}

// ===================================================================

class GetRunStatusResponse::_Internal {
 public:
};

GetRunStatusResponse::GetRunStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  run_status_dict_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GetRunStatusResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:flwr.proto.GetRunStatusResponse)
}
GetRunStatusResponse::GetRunStatusResponse(const GetRunStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  run_status_dict_.MergeFrom(from.run_status_dict_);
  // @@protoc_insertion_point(copy_constructor:flwr.proto.GetRunStatusResponse)
}

inline void GetRunStatusResponse::SharedCtor() {
}

GetRunStatusResponse::~GetRunStatusResponse() {
  // @@protoc_insertion_point(destructor:flwr.proto.GetRunStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GetRunStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  run_status_dict_.Destruct();
}

void GetRunStatusResponse::ArenaDtor(void* object) {
  GetRunStatusResponse* _this = reinterpret_cast< GetRunStatusResponse* >(object);
  _this->run_status_dict_.Destruct();
}
void GetRunStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRunStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flwr.proto.GetRunStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_status_dict_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRunStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, .flwr.proto.RunStatus> run_status_dict = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&run_status_dict_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRunStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flwr.proto.GetRunStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .flwr.proto.RunStatus> run_status_dict = 1;
  if (!this->_internal_run_status_dict().empty()) {
    using MapType = ::_pb::Map<uint64_t, ::flwr::proto::RunStatus>;
    using WireHelper = GetRunStatusResponse_RunStatusDictEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_run_status_dict();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flwr.proto.GetRunStatusResponse)
  return target;
}

size_t GetRunStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flwr.proto.GetRunStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .flwr.proto.RunStatus> run_status_dict = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_run_status_dict_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::flwr::proto::RunStatus >::const_iterator
      it = this->_internal_run_status_dict().begin();
      it != this->_internal_run_status_dict().end(); ++it) {
    total_size += GetRunStatusResponse_RunStatusDictEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRunStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRunStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRunStatusResponse::GetClassData() const { return &_class_data_; }

void GetRunStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRunStatusResponse *>(to)->MergeFrom(
      static_cast<const GetRunStatusResponse &>(from));
}


void GetRunStatusResponse::MergeFrom(const GetRunStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flwr.proto.GetRunStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  run_status_dict_.MergeFrom(from.run_status_dict_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRunStatusResponse::CopyFrom(const GetRunStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flwr.proto.GetRunStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRunStatusResponse::IsInitialized() const {
  return true;
}

void GetRunStatusResponse::InternalSwap(GetRunStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  run_status_dict_.InternalSwap(&other->run_status_dict_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRunStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_flwr_2fproto_2frun_2eproto_getter, &descriptor_table_flwr_2fproto_2frun_2eproto_once,
      file_level_metadata_flwr_2fproto_2frun_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace flwr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flwr::proto::Run_OverrideConfigEntry_DoNotUse*
Arena::CreateMaybeMessage< ::flwr::proto::Run_OverrideConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::Run_OverrideConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::Run*
Arena::CreateMaybeMessage< ::flwr::proto::Run >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::Run >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::RunStatus*
Arena::CreateMaybeMessage< ::flwr::proto::RunStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::RunStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::CreateRunRequest_OverrideConfigEntry_DoNotUse*
Arena::CreateMaybeMessage< ::flwr::proto::CreateRunRequest_OverrideConfigEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::CreateRunRequest_OverrideConfigEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::CreateRunRequest*
Arena::CreateMaybeMessage< ::flwr::proto::CreateRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::CreateRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::CreateRunResponse*
Arena::CreateMaybeMessage< ::flwr::proto::CreateRunResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::CreateRunResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::GetRunRequest*
Arena::CreateMaybeMessage< ::flwr::proto::GetRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::GetRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::GetRunResponse*
Arena::CreateMaybeMessage< ::flwr::proto::GetRunResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::GetRunResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::UpdateRunStatusRequest*
Arena::CreateMaybeMessage< ::flwr::proto::UpdateRunStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::UpdateRunStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::UpdateRunStatusResponse*
Arena::CreateMaybeMessage< ::flwr::proto::UpdateRunStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::UpdateRunStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::GetRunStatusRequest*
Arena::CreateMaybeMessage< ::flwr::proto::GetRunStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::GetRunStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::GetRunStatusResponse_RunStatusDictEntry_DoNotUse*
Arena::CreateMaybeMessage< ::flwr::proto::GetRunStatusResponse_RunStatusDictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::GetRunStatusResponse_RunStatusDictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flwr::proto::GetRunStatusResponse*
Arena::CreateMaybeMessage< ::flwr::proto::GetRunStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flwr::proto::GetRunStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

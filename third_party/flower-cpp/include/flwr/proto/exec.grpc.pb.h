// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flwr/proto/exec.proto
// Original file comments:
// Copyright 2024 Flower Labs GmbH. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_flwr_2fproto_2fexec_2eproto__INCLUDED
#define GRPC_flwr_2fproto_2fexec_2eproto__INCLUDED

#include "flwr/proto/exec.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace flwr {
namespace proto {

class Exec final {
 public:
  static constexpr char const* service_full_name() {
    return "flwr.proto.Exec";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Start run upon request
    virtual ::grpc::Status StartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::flwr::proto::StartRunResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::StartRunResponse>> AsyncStartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::StartRunResponse>>(AsyncStartRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::StartRunResponse>> PrepareAsyncStartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::StartRunResponse>>(PrepareAsyncStartRunRaw(context, request, cq));
    }
    // Start log stream upon request
    std::unique_ptr< ::grpc::ClientReaderInterface< ::flwr::proto::StreamLogsResponse>> StreamLogs(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::flwr::proto::StreamLogsResponse>>(StreamLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::flwr::proto::StreamLogsResponse>> AsyncStreamLogs(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::flwr::proto::StreamLogsResponse>>(AsyncStreamLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::flwr::proto::StreamLogsResponse>> PrepareAsyncStreamLogs(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::flwr::proto::StreamLogsResponse>>(PrepareAsyncStreamLogsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Start run upon request
      virtual void StartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest* request, ::flwr::proto::StartRunResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest* request, ::flwr::proto::StartRunResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Start log stream upon request
      virtual void StreamLogs(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest* request, ::grpc::ClientReadReactor< ::flwr::proto::StreamLogsResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::StartRunResponse>* AsyncStartRunRaw(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flwr::proto::StartRunResponse>* PrepareAsyncStartRunRaw(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::flwr::proto::StreamLogsResponse>* StreamLogsRaw(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::flwr::proto::StreamLogsResponse>* AsyncStreamLogsRaw(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::flwr::proto::StreamLogsResponse>* PrepareAsyncStreamLogsRaw(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::flwr::proto::StartRunResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::StartRunResponse>> AsyncStartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::StartRunResponse>>(AsyncStartRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::StartRunResponse>> PrepareAsyncStartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flwr::proto::StartRunResponse>>(PrepareAsyncStartRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::flwr::proto::StreamLogsResponse>> StreamLogs(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::flwr::proto::StreamLogsResponse>>(StreamLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::flwr::proto::StreamLogsResponse>> AsyncStreamLogs(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::flwr::proto::StreamLogsResponse>>(AsyncStreamLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::flwr::proto::StreamLogsResponse>> PrepareAsyncStreamLogs(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::flwr::proto::StreamLogsResponse>>(PrepareAsyncStreamLogsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest* request, ::flwr::proto::StartRunResponse* response, std::function<void(::grpc::Status)>) override;
      void StartRun(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest* request, ::flwr::proto::StartRunResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamLogs(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest* request, ::grpc::ClientReadReactor< ::flwr::proto::StreamLogsResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::StartRunResponse>* AsyncStartRunRaw(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flwr::proto::StartRunResponse>* PrepareAsyncStartRunRaw(::grpc::ClientContext* context, const ::flwr::proto::StartRunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::flwr::proto::StreamLogsResponse>* StreamLogsRaw(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request) override;
    ::grpc::ClientAsyncReader< ::flwr::proto::StreamLogsResponse>* AsyncStreamLogsRaw(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::flwr::proto::StreamLogsResponse>* PrepareAsyncStreamLogsRaw(::grpc::ClientContext* context, const ::flwr::proto::StreamLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartRun_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamLogs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Start run upon request
    virtual ::grpc::Status StartRun(::grpc::ServerContext* context, const ::flwr::proto::StartRunRequest* request, ::flwr::proto::StartRunResponse* response);
    // Start log stream upon request
    virtual ::grpc::Status StreamLogs(::grpc::ServerContext* context, const ::flwr::proto::StreamLogsRequest* request, ::grpc::ServerWriter< ::flwr::proto::StreamLogsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartRun() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::StartRunRequest* /*request*/, ::flwr::proto::StartRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartRun(::grpc::ServerContext* context, ::flwr::proto::StartRunRequest* request, ::grpc::ServerAsyncResponseWriter< ::flwr::proto::StartRunResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamLogs() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::flwr::proto::StreamLogsRequest* /*request*/, ::grpc::ServerWriter< ::flwr::proto::StreamLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLogs(::grpc::ServerContext* context, ::flwr::proto::StreamLogsRequest* request, ::grpc::ServerAsyncWriter< ::flwr::proto::StreamLogsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartRun<WithAsyncMethod_StreamLogs<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartRun() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::flwr::proto::StartRunRequest, ::flwr::proto::StartRunResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::StartRunRequest* request, ::flwr::proto::StartRunResponse* response) { return this->StartRun(context, request, response); }));}
    void SetMessageAllocatorFor_StartRun(
        ::grpc::MessageAllocator< ::flwr::proto::StartRunRequest, ::flwr::proto::StartRunResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flwr::proto::StartRunRequest, ::flwr::proto::StartRunResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::StartRunRequest* /*request*/, ::flwr::proto::StartRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartRun(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::StartRunRequest* /*request*/, ::flwr::proto::StartRunResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamLogs() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::flwr::proto::StreamLogsRequest, ::flwr::proto::StreamLogsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::flwr::proto::StreamLogsRequest* request) { return this->StreamLogs(context, request); }));
    }
    ~WithCallbackMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::flwr::proto::StreamLogsRequest* /*request*/, ::grpc::ServerWriter< ::flwr::proto::StreamLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::flwr::proto::StreamLogsResponse>* StreamLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::flwr::proto::StreamLogsRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartRun<WithCallbackMethod_StreamLogs<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartRun() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::StartRunRequest* /*request*/, ::flwr::proto::StartRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamLogs() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::flwr::proto::StreamLogsRequest* /*request*/, ::grpc::ServerWriter< ::flwr::proto::StreamLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartRun() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::StartRunRequest* /*request*/, ::flwr::proto::StartRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamLogs() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::flwr::proto::StreamLogsRequest* /*request*/, ::grpc::ServerWriter< ::flwr::proto::StreamLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartRun() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartRun(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::StartRunRequest* /*request*/, ::flwr::proto::StartRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartRun(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamLogs() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamLogs(context, request); }));
    }
    ~WithRawCallbackMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::flwr::proto::StreamLogsRequest* /*request*/, ::grpc::ServerWriter< ::flwr::proto::StreamLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartRun : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartRun() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::flwr::proto::StartRunRequest, ::flwr::proto::StartRunResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::flwr::proto::StartRunRequest, ::flwr::proto::StartRunResponse>* streamer) {
                       return this->StreamedStartRun(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartRun() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartRun(::grpc::ServerContext* /*context*/, const ::flwr::proto::StartRunRequest* /*request*/, ::flwr::proto::StartRunResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartRun(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flwr::proto::StartRunRequest,::flwr::proto::StartRunResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartRun<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamLogs() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::flwr::proto::StreamLogsRequest, ::flwr::proto::StreamLogsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::flwr::proto::StreamLogsRequest, ::flwr::proto::StreamLogsResponse>* streamer) {
                       return this->StreamedStreamLogs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::flwr::proto::StreamLogsRequest* /*request*/, ::grpc::ServerWriter< ::flwr::proto::StreamLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamLogs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::flwr::proto::StreamLogsRequest,::flwr::proto::StreamLogsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamLogs<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartRun<WithSplitStreamingMethod_StreamLogs<Service > > StreamedService;
};

}  // namespace proto
}  // namespace flwr


#endif  // GRPC_flwr_2fproto_2fexec_2eproto__INCLUDED
